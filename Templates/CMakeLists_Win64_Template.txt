#Set ths CMake minimum required version.
cmake_minimum_required(VERSION 3.10)

#Set the project name.
set(PROJECT_NAME [PROJECT_NAME]_Win64 C CXX ASM_MASM)

#Set the project.
project(${PROJECT_NAME})

#Set the C++ standard.
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED True)

#Set the configuration types.
set(CMAKE_CONFIGURATION_TYPES "Debug;DebugEditor;Profile;ProfileEditor;Final")
set(CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING "Reset config to what we need" FORCE)

set(CMAKE_EXE_LINKER_FLAGS_DEBUG "/DEBUG /LTCG:incremental")
set(CMAKE_EXE_LINKER_FLAGS_DEBUGEDITOR "/DEBUG /LTCG:incremental")
set(CMAKE_EXE_LINKER_FLAGS_PROFILE "/DEBUG /LTCG:incremental")
set(CMAKE_EXE_LINKER_FLAGS_PROFILEEDITOR "/DEBUG /LTCG:incremental")
set(CMAKE_EXE_LINKER_FLAGS_FINAL "/LTCG:incremental")

#Add defines.
add_compile_definitions($<$<CONFIG:Debug>:_DEBUG>
						$<$<CONFIG:DebugEditor>:_DEBUG>
						$<$<CONFIG:Profile>:NDEBUG>
						$<$<CONFIG:ProfileEditor>:NDEBUG>
						$<$<CONFIG:Final>:NDEBUG>
						)
add_compile_definitions(__WINDOWS_WASAPI__)
add_compile_definitions(__WINDOWS_ASIO__)
add_compile_definitions(__WINDOWS_MM__)
add_compile_definitions($<$<CONFIG:Debug>:CATALYST_CONFIGURATION_DEBUG>
						$<$<CONFIG:DebugEditor>:CATALYST_CONFIGURATION_DEBUG>
						$<$<CONFIG:Profile>:CATALYST_CONFIGURATION_PROFILE>
						$<$<CONFIG:ProfileEditor>:CATALYST_CONFIGURATION_PROFILE>
						$<$<CONFIG:Final>:CATALYST_CONFIGURATION_FINAL>
						)
add_compile_definitions([CATALYST_DISTRIBUTION])
add_compile_definitions($<$<CONFIG:Debug>:CATALYST_ENABLE_RESOURCE_BUILDING>
						$<$<CONFIG:DebugEditor>:CATALYST_ENABLE_RESOURCE_BUILDING>
						$<$<CONFIG:Profile>:CATALYST_ENABLE_RESOURCE_BUILDING>
						$<$<CONFIG:ProfileEditor>:CATALYST_ENABLE_RESOURCE_BUILDING>
						)
add_compile_definitions($<$<CONFIG:DebugEditor>:CATALYST_EDITOR>
						$<$<CONFIG:ProfileEditor>:CATALYST_EDITOR>
						)
add_compile_definitions([CATALYST_PHYSICS])
add_compile_definitions(CATALYST_PLATFORM_WINDOWS)
add_compile_definitions(CATALYST_RENDERING_VULKAN)
add_compile_definitions($<$<CONFIG:Debug>:TRACY_ENABLE>
						$<$<CONFIG:DebugEditor>:TRACY_ENABLE>
						$<$<CONFIG:Profile>:TRACY_ENABLE>
						$<$<CONFIG:ProfileEditor>:TRACY_ENABLE>
						)
add_compile_definitions($<$<CONFIG:Debug>:TRACY_ON_DEMAND>
						$<$<CONFIG:DebugEditor>:TRACY_ON_DEMAND>
						$<$<CONFIG:Profile>:TRACY_ON_DEMAND>
						$<$<CONFIG:ProfileEditor>:TRACY_ON_DEMAND>
						)

#Add the include/source files.
file(GLOB_RECURSE ENGINE_INCLUDE_FILES ../../Catalyst-Engine/Engine/Include/*.h ../../Catalyst-Engine/Engine/Include/*.hpp)
file(GLOB_RECURSE ENGINE_INLINE_FILES ../../Catalyst-Engine/Engine/Include/*.inl)
file(GLOB_RECURSE ENGINE_SOURCE_FILES ../../Catalyst-Engine/Engine/Source/*.c ../../Catalyst-Engine/Engine/Source/*.cpp  ../../Catalyst-Engine/Engine/Source/*.asm)
file(GLOB_RECURSE ENGINE_RENDERING_FILES ../../Catalyst-Engine/Engine/Rendering/*.common_shader ../../Catalyst-Engine/Engine/Rendering/*.global_render_data ../../Catalyst-Engine/Engine/Rendering/*.render_pipeline ../../Catalyst-Engine/Engine/Rendering/*.shader_function_library ../../Catalyst-Engine/Engine/Rendering/*.storage_buffer_definition ../../Catalyst-Engine/Engine/Rendering/*.uniform_buffer_definition)
file(GLOB_RECURSE GAME_INCLUDE_FILES ../Code/Include/*.h ../Code/Include/*.hpp)
file(GLOB_RECURSE GAME_RENDERING_FILES ../Rendering/*.common_shader ../Rendering/*.global_render_data ../Rendering/*.render_pipeline ../Rendering/*.shader_function_library ../Rendering/*.storage_buffer_definition ../Rendering/*.uniform_buffer_definition)
file(GLOB_RECURSE GAME_SCRIPT_FILES ../Content/Assets/*.Script)
file(GLOB_RECURSE GAME_SOURCE_FILES ../Code/Source/*.c ../Code/Source/*.cpp  ../Code/Source/*.asm)

#Add the third party include files.
file(GLOB_RECURSE ASSIMP_INCLUDE_FILES ../../Catalyst-Engine/Engine/Include/ThirdParty/assimp/*.h ../../Catalyst-Engine/Engine/Include/ThirdParty/assimp/*.hpp)

#Add the executable.
add_executable(${PROJECT_NAME} WIN32 ${ENGINE_INCLUDE_FILES} ${ENGINE_INLINE_FILES} ${ENGINE_SOURCE_FILES}  ${ENGINE_RENDERING_FILES} ${GAME_INCLUDE_FILES} ${GAME_RENDERING_FILES} ${GAME_SCRIPT_FILES} ${GAME_SOURCE_FILES} ${ASSIMP_INCLUDE_FILES})

#Set the core include paths.
target_include_directories(${PROJECT_NAME} PUBLIC ../../Catalyst-Engine/Engine/Include)
target_include_directories(${PROJECT_NAME} PUBLIC ../Code/Include)

#Set the third party include paths.
target_include_directories(${PROJECT_NAME} PUBLIC ../../Catalyst-Engine/Engine/Include/ThirdParty/assimp)

#Set the third party include paths.
[SET_MLPACK_INCLUDE_DIRECTORIES]

#Set the library paths.
target_link_directories(${PROJECT_NAME} PUBLIC ../../Catalyst-Engine/Engine/Libraries/Static)

#Link the libraries.
[LINK_PHYSX_LIBRARIES]
[LINK_STEAM_LIBRARIES]
target_link_libraries(${PROJECT_NAME} vulkan-1)
target_link_libraries(${PROJECT_NAME} 	$<$<CONFIG:Debug>:Debug/shaderc_shared>
										$<$<CONFIG:DebugEditor>:Debug/shaderc_shared>
										$<$<CONFIG:Profile>:Profile/shaderc_shared>
										$<$<CONFIG:ProfileEditor>:Profile/shaderc_shared>
										)
target_link_libraries(${PROJECT_NAME} Winmm)
target_link_libraries(${PROJECT_NAME} xinput)
target_link_libraries(${PROJECT_NAME} 	$<$<CONFIG:Debug>:Debug/libsoundwave>
										$<$<CONFIG:DebugEditor>:Debug/libsoundwave>
										$<$<CONFIG:Profile>:Profile/libsoundwave>
										$<$<CONFIG:ProfileEditor>:Profile/libsoundwave>
										$<$<CONFIG:Final>:final/libsoundwave>
										)
target_link_libraries(${PROJECT_NAME} 	$<$<CONFIG:Debug>:Debug/assimp-vc143-mtd>
										$<$<CONFIG:DebugEditor>:Debug/assimp-vc143-mtd>
										$<$<CONFIG:Profile>:Profile/assimp-vc143-mt>
										$<$<CONFIG:ProfileEditor>:Profile/assimp-vc143-mt>
										)
[LINK_MLPACK_LIBRARIES]

#Set the startup project.
set_property(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} PROPERTY VS_STARTUP_PROJECT ${PROJECT_NAME})

#Add the Visual Studio filters.
set(ENGINE_INCLUDE_FILES_ROOT "${CMAKE_SOURCE_DIR}/../../Catalyst-Engine/Engine/Include")
source_group(TREE ${ENGINE_INCLUDE_FILES_ROOT} PREFIX "Catalyst Engine Include" FILES ${ENGINE_INCLUDE_FILES} ${ENGINE_INLINE_FILES})

set(ENGINE_SOURCE_FILES_ROOT "${CMAKE_SOURCE_DIR}/../../Catalyst-Engine/Engine/Source")
source_group(TREE ${ENGINE_SOURCE_FILES_ROOT} PREFIX "Catalyst Engine Source" FILES ${ENGINE_SOURCE_FILES})

set(ENGINE_RENDERING_FILES_ROOT "${CMAKE_SOURCE_DIR}/../../Catalyst-Engine/Engine/Rendering")
source_group(TREE ${ENGINE_RENDERING_FILES_ROOT} PREFIX "Catalyst Engine Rendering" FILES ${ENGINE_RENDERING_FILES})

set(GAME_INCLUDE_FILES_ROOT "${CMAKE_SOURCE_DIR}/../Code/Include")
source_group(TREE ${GAME_INCLUDE_FILES_ROOT} PREFIX "${PROJECT_NAME} Include" FILES ${GAME_INCLUDE_FILES})

set(GAME_RENDERING_FILES_ROOT "${CMAKE_SOURCE_DIR}/../Rendering")
source_group(TREE ${GAME_RENDERING_FILES_ROOT} PREFIX "${PROJECT_NAME} Rendering" FILES ${GAME_RENDERING_FILES})

set(GAME_SCRIPT_FILES_ROOT "${CMAKE_SOURCE_DIR}/../Content/Assets")
source_group(TREE ${GAME_SCRIPT_FILES_ROOT} PREFIX "${PROJECT_NAME} Script" FILES ${GAME_SCRIPT_FILES})

set(GAME_SOURCE_FILES_ROOT "${CMAKE_SOURCE_DIR}/../Code/Source")
source_group(TREE ${GAME_SOURCE_FILES_ROOT} PREFIX "${PROJECT_NAME} Source" FILES ${GAME_SOURCE_FILES})

#Set optimization levels.
set(CMAKE_CXX_FLAGS_DEBUG "/Od /Oi /MTd /sdl- /GL /Zi [MLPACK_CXX_FLAGS]")
set(CMAKE_CXX_FLAGS_DEBUGEDITOR "/Od /Oi /MTd /sdl- /GL /Zi [MLPACK_CXX_FLAGS]")
set(CMAKE_CXX_FLAGS_PROFILE "/O2 /Oi /MT /sdl- /GL /Zi [MLPACK_CXX_FLAGS]")
set(CMAKE_CXX_FLAGS_PROFILEEDITOR "/O2 /Oi /MT /sdl- /GL /Zi [MLPACK_CXX_FLAGS]")
set(CMAKE_CXX_FLAGS_FINAL "/O2 /Oi /MT /sdl- /GL [MLPACK_CXX_FLAGS]")

#Remove the ZERO_CHECK project.
set(CMAKE_SUPPRESS_REGENERATION true)

#Add build generation for the Final config.
add_custom_command(TARGET ${PROJECT_NAME} POST_BUILD COMMAND if $(Configuration) == Final call "RunBuildGeneration.bat")