//Version declaration.
#version 460

//Extensions.
#extension GL_GOOGLE_include_directive : enable

//Includes.
#include "CatalystShaderCommon.glsl"
#include "CatalystLightingData.glsl"
#include "CatalystRayTracingCore.glsl"
#include "CatalystRayTracingData.glsl"

//Descriptor set data.
layout (set = 3, binding = 0, rgba32f) uniform image2D scene_features_2_image;
layout (set = 3, binding = 1, r8) uniform image2D ambient_occlusion_image;

//In parameters.
layout(location = 1) rayPayloadNV float visibility;

/*
*	The probability density function.
*/
float ProbabilityDensityFunction(vec3 pre_rotation_hemisphere_direction)
{
	return max(dot(pre_rotation_hemisphere_direction, vec3(0.0f, 0.0f, 1.0f)), 0.0f);
}

void main() 
{
	//Calculate the screen coordinate.
	vec2 screen_coordinate = (vec2(gl_LaunchIDNV.xy) + vec2(0.5f)) / vec2(gl_LaunchSizeNV.xy);

	//Sample the scene features.
	vec4 scene_features_2 = imageLoad(scene_features_2_image, ivec2(gl_LaunchIDNV.xy));
	vec3 normal = scene_features_2.xyz;
	float depth = scene_features_2.w;

	//Calculate the world position at this fragment.
	vec3 world_position = CalculateWorldPosition(screen_coordinate, depth);

	//Calculate the noise texture coordinate.
	vec2 noise_texture_coordinate = vec2(gl_LaunchIDNV.xy) / 64.0f + vec2(activeNoiseTextureOffsetX, activeNoiseTextureOffsetY);

	//Sample the noise texture.
	vec4 noise_texture_sample = texture(sampler2D(GLOBAL_TEXTURES[activeNoiseTextureIndex], GLOBAL_SAMPLERS[GLOBAL_SAMPLER_FILTER_NEAREST_MIPMAP_MODE_NEAREST_ADDRESS_MODE_REPEAT_INDEX]), noise_texture_coordinate);

	//Calculate the random rotation matrix.
	mat3 random_rotation = CalculateGramSchmidtRotationMatrix(normal, noise_texture_sample.xyz * 2.0f - 1.0f);

	//Calculate the random hemisphere sample start index.
	uint random_hemisphere_sample_start_index = uint(noise_texture_sample.w * 64.0f);

	//Keep track of the total weight.
	float total_weight = 0.0f;

	//Calculate the occlusion.
	float occlusion = 0.0f;

	for (uint i = 0; i < AMBIENT_OCCLUSION_NUMBER_OF_SAMPLES; ++i)
	{
		//Sample the random direction and length.
		vec3 pre_rotation_hemisphere_direction;
		float random_length;

		SampleHammersleyHemisphereSample(random_hemisphere_sample_start_index + gl_LaunchIDNV.x + gl_LaunchIDNV.y + i, pre_rotation_hemisphere_direction, random_length);

		//Rotate the random direction.
		vec3 random_direction = random_rotation * pre_rotation_hemisphere_direction;

		//Flip the direction, if needed.
		random_direction = dot(random_direction, normal) >= 0.0f ? random_direction : -random_direction;

		//Trace the visibility.
		bool hit_anything = false;

		if (!hit_anything && true)
		{
			visibility = 0.0f;

			traceNV(
					TERRAIN_TOP_LEVEL_ACCELERATION_STRUCTURE, 													//topLevel
					gl_RayFlagsTerminateOnFirstHitNV | gl_RayFlagsOpaqueNV | gl_RayFlagsSkipClosestHitShaderNV, //rayFlags
					0xff, 																						//cullMask
					0, 																							//sbtRecordOffset
					0, 																							//sbtRecordStride
					0, 																							//missIndex
					world_position, 																			//origin
					CATALYST_RAY_TRACING_T_MINIMUM, 															//Tmin
					random_direction,																			//direction
					AMBIENT_OCCLUSION_RADIUS * random_length,													//Tmax
					1 																							//payload
					);

			hit_anything = visibility < 1.0f;
		}

		if (!hit_anything && true)
		{
			visibility = 0.0f;

			traceNV(
					STATIC_TOP_LEVEL_ACCELERATION_STRUCTURE, 													//topLevel
					gl_RayFlagsTerminateOnFirstHitNV | gl_RayFlagsOpaqueNV | gl_RayFlagsSkipClosestHitShaderNV, //rayFlags
					0xff, 																						//cullMask
					0, 																							//sbtRecordOffset
					0, 																							//sbtRecordStride
					0, 																							//missIndex
					world_position, 																			//origin
					CATALYST_RAY_TRACING_T_MINIMUM, 															//Tmin
					random_direction,																			//direction
					AMBIENT_OCCLUSION_RADIUS * random_length,													//Tmax
					1 																							//payload
					);

			hit_anything = visibility < 1.0f;
		}

		if (!hit_anything && true)
		{
			visibility = 0.0f;

			traceNV(
					DYNAMIC_TOP_LEVEL_ACCELERATION_STRUCTURE, 													//topLevel
					gl_RayFlagsTerminateOnFirstHitNV | gl_RayFlagsOpaqueNV | gl_RayFlagsSkipClosestHitShaderNV, //rayFlags
					0xff, 																						//cullMask
					0, 																							//sbtRecordOffset
					0, 																							//sbtRecordStride
					0, 																							//missIndex
					world_position, 																			//origin
					CATALYST_RAY_TRACING_T_MINIMUM, 															//Tmin
					random_direction,																			//direction
					AMBIENT_OCCLUSION_RADIUS * random_length,													//Tmax
					1 																							//payload
					);

			hit_anything = visibility < 1.0f;
		}

		//Calculate the sample weight.
		float sample_weight = ProbabilityDensityFunction(pre_rotation_hemisphere_direction);

		//There is occlusion if a hit was detected.
		occlusion += float(hit_anything) * sample_weight;
		total_weight += sample_weight;
	}

	//Normalize the ambient occlusion.
	occlusion = total_weight != 0.0f ? 1.0f - (occlusion / total_weight) : 1.0f;

    //Write to the image.
	imageStore(ambient_occlusion_image, ivec2(gl_LaunchIDNV.xy), vec4(vec3(occlusion), 1.0f));
}