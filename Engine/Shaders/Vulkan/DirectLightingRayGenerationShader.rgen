//Version declaration.
#version 460

//Extensions.
#extension GL_GOOGLE_include_directive : enable

//Includes.
#include "CatalystShaderCommon.glsl"
#include "CatalystLightingData.glsl"
#include "CatalystRayTracingCore.glsl"
#include "CatalystRayTracingData.glsl"
#include "CatalystRenderingUtilities.glsl"
#include "..\..\Include\Rendering\Native\Shader\CatalystLighting.h"

//Descriptor set data.
layout (set = 3, binding = 0, rgba8) uniform image2D scene_features_1_image;
layout (set = 3, binding = 1, rgba32f) uniform image2D scene_features_2_image;
layout (set = 3, binding = 2, rgba8) uniform image2D scene_features_3_image;
layout (set = 3, binding = 3, rgba32f) uniform image2D scene_image;

//In parameters.
layout(location = 1) rayPayloadNV float visibility;

void main() 
{
	//Calculate the screen coordinate.
	vec2 screen_coordinate = (vec2(gl_LaunchIDNV.xy) + vec2(0.5f)) / vec2(gl_LaunchSizeNV.xy);

	//Retrieve the scene features.
	vec4 sceneFeatures1 = imageLoad(scene_features_1_image, ivec2(gl_LaunchIDNV.xy));
	vec4 sceneFeatures2 = imageLoad(scene_features_2_image, ivec2(gl_LaunchIDNV.xy));
	vec4 sceneFeatures3 = imageLoad(scene_features_3_image, ivec2(gl_LaunchIDNV.xy));

	//Retrieve all properties.
	Material material = GLOBAL_MATERIALS[int(sceneFeatures1.w * 255.0f)];
	vec3 albedo = sceneFeatures1.rgb;
	float depth = sceneFeatures2.w;
	vec3 shadingNormal = sceneFeatures2.xyz;
	float roughness = sceneFeatures3.x;
	float metallic = sceneFeatures3.y;
	float ambientOcclusion = sceneFeatures3.z;

	//Calculate the hit position.
	vec3 world_position = CalculateWorldPosition(screen_coordinate, depth);

	//Generate the view direction.
	vec3 view_direction = normalize(world_position - PERCEIVER_WORLD_POSITION);

	//Sample the noise texture.
	vec2 noise_texture_coordinate = vec2(gl_LaunchIDNV.xy) / 64.0f + vec2(activeNoiseTextureOffsetX, activeNoiseTextureOffsetY);
	vec4 random_noise = texture(sampler2D(GLOBAL_TEXTURES[activeNoiseTextureIndex], GLOBAL_SAMPLERS[GLOBAL_SAMPLER_FILTER_NEAREST_MIPMAP_MODE_NEAREST_ADDRESS_MODE_REPEAT_INDEX]), noise_texture_coordinate);

	//Calculate the direct lighting.
	vec3 direct_lighting = vec3(0.0f);

	//Calculate all lights.
	for (int i = 0; i < NUMBER_OF_LIGHTS; ++i)
	{
		Light light = UnpackLight(i);

		switch (light.light_type)
		{
			case LIGHT_TYPE_DIRECTIONAL:
			{
				//Alter the direction a bit to simulare soft shadows.
				vec3 light_direction = normalize(light.position_or_direction + vec3(random_noise.xyz * 2.0f - 1.0f) * 0.01f);

				//Determine the visibility.
				bool hit_anything = false;

				if (TEST_BIT(light.light_properties, LIGHT_PROPERTY_SURFACE_SHADOW_CASTING_BIT))
				{
					visibility = 0.0f;

					traceNV(
							TOP_LEVEL_ACCELERATION_STRUCTURE, 															//topLevel
							gl_RayFlagsTerminateOnFirstHitNV | gl_RayFlagsOpaqueNV | gl_RayFlagsSkipClosestHitShaderNV, //rayFlags
							0xff, 																						//cullMask
							0, 																							//sbtRecordOffset
							0, 																							//sbtRecordStride
							0, 																							//missIndex
							world_position, 																			//origin
							CATALYST_RAY_TRACING_T_MINIMUM, 															//Tmin
							-light_direction,																			//direction
							VIEW_DISTANCE,																				//Tmax
							1 																							//payload
							);

					hit_anything = visibility < 1.0f;
				}

				if (!hit_anything)
				{
					direct_lighting += CalculateLighting(	-view_direction,
															albedo,
															shadingNormal,
															roughness,
															metallic,
															ambientOcclusion,
															material.thickness,
															light_direction,
															light.color * light.intensity);
				}

				break;
			}

			case LIGHT_TYPE_POINT:
			{
				//Alter the position a bit to simulare soft shadows.
				vec3 light_position = light.position_or_direction + vec3(random_noise.xyz * 2.0f - 1.0f) * light.size;

				//Calculate the light direction.
				vec3 light_direction = world_position - light_position;

				//Determine the distance to the light.
				float distance_to_light = LengthSquared3(light_direction);

				//Only calculate lighting if the the world position is within the light's radius.
				if (distance_to_light < light.radius * light.radius)
				{
					//Normalize.
					distance_to_light = sqrt(distance_to_light);
					light_direction /= distance_to_light;

					//Determine the visibility.
					bool hit_anything = false;

					if (TEST_BIT(light.light_properties, LIGHT_PROPERTY_SURFACE_SHADOW_CASTING_BIT))
					{
						visibility = 0.0f;

						traceNV(
								TOP_LEVEL_ACCELERATION_STRUCTURE, 															//topLevel
								gl_RayFlagsTerminateOnFirstHitNV | gl_RayFlagsOpaqueNV | gl_RayFlagsSkipClosestHitShaderNV, //rayFlags
								0xff, 																						//cullMask
								0, 																							//sbtRecordOffset
								0, 																							//sbtRecordStride
								0, 																							//missIndex
								world_position, 																			//origin
								CATALYST_RAY_TRACING_T_MINIMUM, 															//Tmin
								-light_direction,																			//direction
								distance_to_light,																			//Tmax
								1 																							//payload
								);

						hit_anything = visibility < 1.0f;
					}

					if (!hit_anything)
					{
						//Calculate the attenuation.
						float attenuation = CalculateAttenuation(distance_to_light, light.radius);

						direct_lighting += CalculateLighting(	-view_direction,
																albedo,
																shadingNormal,
																roughness,
																metallic,
																ambientOcclusion,
																material.thickness,
																light_direction,
																light.color * light.intensity) * attenuation;
					}
				}

				break;
			}
		}
	}

	//Write to the image.
	imageStore(scene_image, ivec2(gl_LaunchIDNV.xy), vec4(imageLoad(scene_image, ivec2(gl_LaunchIDNV.xy)).rgb + direct_lighting, 1.0f));
}