//Version declaration.
#version 460

//Extensions.
#extension GL_GOOGLE_include_directive : enable

//Includes.
#include "CatalystShaderCommon.glsl"
#include "CatalystDenoisingUtilities.glsl"
#include "CatalystLightingData.glsl"

//Constants.
#define DIRECT_LIGHTING_DENOISING_SIZE (5)
#define DIRECT_LIGHTING_DENOISING_START_END ((DIRECT_LIGHTING_DENOISING_SIZE - 1) / 2)

/*
*	Scene features struct definition.
*/
struct SceneFeatures
{
	float hitDistance;
};

//Push constant data.
layout (push_constant) uniform PushConstantData
{
    layout (offset = 0) int pass;
};

//Descriptor set data.
layout (set = 1, binding = 0, rgba32f) uniform image2D sceneFeatures2Texture;

/*
*	Samples the scene features at the specified coordinates.
*/
SceneFeatures SampleSceneFeatures(ivec2 coordinate)
{
	vec4 sceneFeatures2 = imageLoad(sceneFeatures2Texture, coordinate);

	SceneFeatures features;

	features.hitDistance = sceneFeatures2.w;

	return features;
}

void main()
{
	//Sample the scene features at the current fragment.
	SceneFeatures currentFeatures = SampleSceneFeatures(ivec2(gl_GlobalInvocationID.xy));

	//Denoise the visibility term for the the directional light direct lighting result.
	{
		//Sample the direct lighting result at the current fragment.
		vec4 currentDirectLightingResult = imageLoad(directionalLightVisibilityTexture, ivec2(gl_GlobalInvocationID.xy));

		//Denoise the visibility term in the direct lighting result.
		float denoisedVisibility = 0.0f;
		float denoisedVisibilityTotalWeight = 0.0f;

		for (int x = -DIRECT_LIGHTING_DENOISING_START_END; x <= DIRECT_LIGHTING_DENOISING_START_END; ++x)
		{

			//Calculate the sample coordinate.
			ivec2 sampleCoordinate = ivec2(gl_GlobalInvocationID.xy) + ivec2(pass == 0 ? x : 0, pass == 0 ? 0 : x);
			SceneFeatures sampleFeatures = SampleSceneFeatures(sampleCoordinate);

			/*
			*	Calculate the sample weight based on certain criteria;
			*	
			*	1. How closely aligned are the hit distances?
			*/
			float sampleWeight = 1.0f;

			sampleWeight *= 1.0f - min(abs(currentFeatures.hitDistance - sampleFeatures.hitDistance), 1.0f);

			denoisedVisibility += UnpackVisibilityTerm(imageLoad(directionalLightVisibilityTexture, sampleCoordinate).x, pass) * sampleWeight;

			denoisedVisibilityTotalWeight += sampleWeight;
		}

		//Normalize the denoised visibility.
		denoisedVisibility /= denoisedVisibilityTotalWeight;

		//Write the fragment.
		imageStore(directionalLightVisibilityTexture, ivec2(gl_GlobalInvocationID.xy), vec4(pass == 0 ? PackVisibilityTerm(currentDirectLightingResult.x, denoisedVisibility) : PackVisibilityTerm(denoisedVisibility, currentDirectLightingResult.x), 0.0f, 0.0f, 0.0f));
	}

	for (int i = 0; i < numberOfLights; ++i)
	{
		{
			//Sample the direct lighting result at the current fragment.
			vec4 currentDirectLightingResult = imageLoad(lightsVisibilityTextures[i], ivec2(gl_GlobalInvocationID.xy));

			//Denoise the visibility term in the direct lighting result.
			float denoisedVisibility = 0.0f;
			float denoisedVisibilityTotalWeight = 0.0f;

			for (int x = -DIRECT_LIGHTING_DENOISING_START_END; x <= DIRECT_LIGHTING_DENOISING_START_END; ++x)
			{

				//Calculate the sample coordinate.
				ivec2 sampleCoordinate = ivec2(gl_GlobalInvocationID.xy) + ivec2(pass == 0 ? x : 0, pass == 0 ? 0 : x);
				SceneFeatures sampleFeatures = SampleSceneFeatures(sampleCoordinate);

				/*
				*	Calculate the sample weight based on certain criteria;
				*	
				*	1. How closely aligned are the hit distances?
				*/
				float sampleWeight = 1.0f;

				sampleWeight *= 1.0f - min(abs(currentFeatures.hitDistance - sampleFeatures.hitDistance), 1.0f);

				denoisedVisibility += UnpackVisibilityTerm(imageLoad(lightsVisibilityTextures[i], sampleCoordinate).x, pass) * sampleWeight;

				denoisedVisibilityTotalWeight += sampleWeight;
			}

			//Normalize the denoised visibility.
			denoisedVisibility /= denoisedVisibilityTotalWeight;

			//Write the fragment.
			imageStore(lightsVisibilityTextures[i], ivec2(gl_GlobalInvocationID.xy), vec4(pass == 0 ? PackVisibilityTerm(currentDirectLightingResult.x, denoisedVisibility) : PackVisibilityTerm(denoisedVisibility, currentDirectLightingResult.x), 0.0f, 0.0f, 0.0f));
		}
	}
}