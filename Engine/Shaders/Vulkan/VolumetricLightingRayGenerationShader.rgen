//Version declaration.
#version 460

//Extensions.
#extension GL_GOOGLE_include_directive : enable

//Includes.
#include "CatalystShaderCommon.glsl"
#include "CatalystLightingData.glsl"
#define RAY_TRACING_SHADER
#include "CatalystModelData.glsl"
#include "CatalystRayTracingCore.glsl"
#include "CatalystShaderPhysicallyBasedLighting.glsl"

//Constants.
#define CATALYST_RAY_TRACING_VOLUMETRIC_LIGHTING_BASE_COLOR (vec3(0.8f, 0.9f, 1.0f))

//Descriptor set data.
layout (set = 3, binding = 0) uniform sampler2D sceneFeatures2Texture;
layout (set = 3, binding = 1, rgba32f) uniform image2D volumetricLightingImage;

//In parameters.
layout(location = 1) rayPayloadNV float visibility;

void main() 
{
	//Calculate the screen coordinate.
	vec2 screenCoordinate = (vec2(gl_LaunchIDNV.xy) + vec2(0.5f)) / vec2(gl_LaunchSizeNV.xy);

	//Load the scene features.
	vec4 sceneFeatures2 = texture(sceneFeatures2Texture, screenCoordinate);

	//Retrieve all properties.
	float hitDistance = sceneFeatures2.w;

	//Calculate the ray direction.
	vec3 rayDirection = CalculateRayDirection(screenCoordinate);

	//Calculate the volumetric lighting.
	vec3 volumetricLighting = vec3(0.0f);

	//Add the ambient lighting.
	volumetricLighting += CATALYST_RAY_TRACING_VOLUMETRIC_LIGHTING_BASE_COLOR * vec3(ambientIlluminationIntensity);

	//Calculate the volumetric lighting for all lights.
	for (int i = 0; i < numberOfLights; ++i)
	{
		//Unpack the light.
		Light light = UnpackLight(i);

		//Sample the random vector.
		vec4 randomVector = texture(sampler2D(globalTextures[(activeNoiseTextureIndex + i) & 63], globalSamplers[GLOBAL_SAMPLER_FILTER_NEAREST_MIPMAP_MODE_NEAREST_ADDRESS_MODE_REPEAT_INDEX]), vec2(gl_LaunchIDNV.xy) / 64.0f + vec2(activeNoiseTextureOffsetX, activeNoiseTextureOffsetY));

		for (int j = 0; j < 4; ++j)
		{
			//Calculate the volumetric particle hit distance.
			float volumetricParticleHitDistance = hitDistance * randomVector[j];

			//Calculate the hit position.
			vec3 hitPosition = perceiverWorldPosition + rayDirection * volumetricParticleHitDistance;

			float lengthToLight = length(light.position - hitPosition);
			vec3 lightDirection = vec3(light.position - hitPosition) / lengthToLight;

			//Calculate the attenuation.
			float attenuation = pow(1.0f / (1.0f + lengthToLight + (lengthToLight * lengthToLight)), 2.0f);

			//Determine the visibility.
			if (shadowsMode == SHADOWS_MODE_NONE)
			{
				visibility = 1.0f;
			}

			else if (shadowsMode == SHADOWS_MODE_RAY_TRACED)
			{
				visibility = 0.0f;

				traceNV(
						topLevelAccelerationStructure, 																//topLevel
						gl_RayFlagsTerminateOnFirstHitNV | gl_RayFlagsOpaqueNV | gl_RayFlagsSkipClosestHitShaderNV, //rayFlags
						0xff, 																						//cullMask
						0, 																							//sbtRecordOffset
						0, 																							//sbtRecordStride
						0, 																							//missIndex
						hitPosition, 																				//origin
						CATALYST_RAY_TRACING_T_MINIMUM, 															//Tmin
						lightDirection,																				//direction
						lengthToLight,																				//Tmax
						1 																							//payload
						);
			}

			//Add the direct lighting.
			volumetricLighting += CATALYST_RAY_TRACING_VOLUMETRIC_LIGHTING_BASE_COLOR * light.color * light.strength * float(numberOfLights) * attenuation * visibility * 0.25f;
		}
	}

	//Write to the image.
	imageStore(volumetricLightingImage, ivec2(gl_LaunchIDNV.xy), vec4(volumetricLighting, 1.0f));
}