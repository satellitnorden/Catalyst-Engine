//Version declaration.
#version 460

//Extensions.
#extension GL_GOOGLE_include_directive : enable

//Includes.
#include "CatalystShaderCommon.glsl"
#include "CatalystRayTracingCore.glsl"

//Descriptor set data.
layout (set = 1, binding = 0, rgba32f) uniform image2D diffuseIrradianceImage;
layout (set = 1, binding = 1, rgba32f) uniform image2D specularIrradianceImage;
layout (set = 1, binding = 2, rgba8) uniform image2D sceneFeatures1Image;
layout (set = 1, binding = 3, rgba32f) uniform image2D sceneFeatures2Image;
layout (set = 1, binding = 4, rgba8) uniform image2D sceneFeatures3Image;
layout (set = 1, binding = 5, rgba32f) uniform image2D sceneFeatures4Image;
layout (set = 1, binding = 6) uniform accelerationStructureNV topLevelAccelerationStructure;

//In parameters.
layout(location = 0) rayPayloadNV PrimaryRayPayload rayPayload;

void main() 
{
	//Inidicate that this is the top recursion level.
	rayPayload.currentRecursionDepth = 0;

	//Generate the ray direction.
	vec3 rayDirection = CalculateRayDirection(vec2(gl_LaunchIDNV.xy) / vec2(gl_LaunchSizeNV.xy));
	//rayDirection = mix(rayDirection, dot(rayDirection, rayPayload.randomVector) >= 0.0f ? rayPayload.randomVector : rayPayload.randomVector * -1.0f, 0.00025f); //0.000025f step.

	traceNV(
			topLevelAccelerationStructure, 	//topLevel
			gl_RayFlagsOpaqueNV, 			//rayFlags
			0xff, 							//cullMask
			0, 								//sbtRecordOffset
			0, 								//sbtRecordStride
			0, 								//missIndex
			perceiverWorldPosition, 		//origin
			CATALYST_RAY_TRACING_T_MINIMUM, //Tmin
			rayDirection, 					//direction
			CATALYST_RAY_TRACING_T_MAXIMUM, //Tmax
			0 								//payload
			);

	imageStore(diffuseIrradianceImage, ivec2(gl_LaunchIDNV.xy), vec4(rayPayload.diffuseIrradiance, 1.0f));
	imageStore(specularIrradianceImage, ivec2(gl_LaunchIDNV.xy), vec4(rayPayload.specularIrradiance, 1.0f));
    imageStore(sceneFeatures1Image, ivec2(gl_LaunchIDNV.xy), vec4(rayPayload.albedo, 1.0f));
    imageStore(sceneFeatures2Image, ivec2(gl_LaunchIDNV.xy), vec4(rayPayload.normal, rayPayload.depth));
    imageStore(sceneFeatures3Image, ivec2(gl_LaunchIDNV.xy), vec4(rayPayload.roughness, rayPayload.metallic, rayPayload.ambientOcclusion, 1.0f));
    imageStore(sceneFeatures4Image, ivec2(gl_LaunchIDNV.xy), vec4(uintBitsToFloat(rayPayload.hitInstanceID), uintBitsToFloat(rayPayload.hitPrimitiveID), 0.0f, 0.0f));
}
