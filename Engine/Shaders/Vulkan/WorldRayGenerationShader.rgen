//Version declaration.
#version 460

//Extensions.
#extension GL_GOOGLE_include_directive : enable

//Includes.
#include "CatalystShaderCommon.glsl"
#include "CatalystRayTracingCore.glsl"

//Descriptor set data.
layout (set = 1, binding = 0, rgba32f) uniform image2D sceneImage;
layout (set = 1, binding = 1, rgba32f) uniform image2D sceneFeaturesImage;
layout (set = 1, binding = 2) uniform accelerationStructureNV topLevelAccelerationStructure;

//Push constant data.
layout (push_constant) uniform PushConstantData
{
	layout (offset = 0) int numberOfIterations;
	layout (offset = 4) int currentIteration;

    layout (offset = 8) float seed1;
    layout (offset = 12) float seed2;
    layout (offset = 16) float seed3;
    layout (offset = 20) float seed4;
    layout (offset = 24) float seed5;
    layout (offset = 28) float seed6;
};

//In parameters.
layout(location = 0) rayPayloadNV RayPayload rayPayload;

/*
*	Calculates the direction.
*/
vec3 CalculateDirection()
{
	vec2 center = vec2(gl_LaunchIDNV.xy) + vec2(0.5f);
    vec2 textureCoordinate = center / vec2(gl_LaunchSizeNV.xy);
    vec2 nearPlaneCoordinate = textureCoordinate * 2.0f - 1.0f;
	vec4 viewSpacePosition = inverseProjectionMatrix * vec4(vec3(nearPlaneCoordinate, 1.0f), 1.0f);
	float inverseViewSpacePositionDenominator = 1.0f / viewSpacePosition.w;
	viewSpacePosition *= inverseViewSpacePositionDenominator;
	vec4 worldSpacePosition = inversePerceiverMatrix * viewSpacePosition;

	vec3 worldPosition = vec3(worldSpacePosition.x, worldSpacePosition.y, worldSpacePosition.z);

	return normalize(worldPosition - perceiverWorldPosition);
}

void main() 
{
	//Inidicate that this is the top recursion level.
	rayPayload.currentRecursionDepth = 0;

	traceNV(
			topLevelAccelerationStructure, 	//topLevel
			gl_RayFlagsOpaqueNV, 			//rayFlags
			0xff, 							//cullMask
			0, 								//sbtRecordOffset
			0, 								//sbtRecordStride
			0, 								//missIndex
			perceiverWorldPosition, 		//origin
			CATALYST_RAY_TRACING_T_MINIMUM, //Tmin
			CalculateDirection(), 			//direction
			CATALYST_RAY_TRACING_T_MAXIMUM, //Tmax
			0 								//payload
			);

	if (currentIteration == 0)
    {
    	imageStore(sceneImage, ivec2(gl_LaunchIDNV.xy), vec4(rayPayload.radiance, 1.0f) / numberOfIterations);
    	imageStore(sceneFeaturesImage, ivec2(gl_LaunchIDNV.xy), vec4(rayPayload.normal, rayPayload.depth) / numberOfIterations);
    }

    else
    {
    	vec4 previousRadiance = imageLoad(sceneImage, ivec2(gl_LaunchIDNV.xy));
    	vec4 previousSceneFeatures = imageLoad(sceneFeaturesImage, ivec2(gl_LaunchIDNV.xy));

    	imageStore(sceneImage, ivec2(gl_LaunchIDNV.xy), (previousRadiance + vec4(rayPayload.radiance, 1.0f)) / numberOfIterations);
    	imageStore(sceneFeaturesImage, ivec2(gl_LaunchIDNV.xy), (previousSceneFeatures + vec4(rayPayload.normal, rayPayload.depth)) / numberOfIterations);
    }
}
