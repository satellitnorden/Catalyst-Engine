//Version declaration.
#version 460

//Extensions.
#extension GL_GOOGLE_include_directive : enable

//Includes.
#include "CatalystShaderCommon.glsl"
#include "CatalystLightingData.glsl"
#include "CatalystRayTracingCore.glsl"
#include "CatalystRayTracingData.glsl"

//Descriptor set data.
layout (set = 3, binding = 0, rgba32f) uniform image2D scene_features_2_image;
layout (set = 3, binding = 1, rgba8) uniform image2D shadows_image;

//In parameters.
layout(location = 1) rayPayloadNV float visibility;

void main() 
{
	//Calculate the screen coordinate.
	vec2 screen_coordinate = (vec2(gl_LaunchIDNV.xy) + vec2(0.5f)) / vec2(gl_LaunchSizeNV.xy);

	//Sample the scene features.
	vec4 scene_features_2 = imageLoad(scene_features_2_image, ivec2(gl_LaunchIDNV.xy));
	float depth = scene_features_2.w;

	//Calculate the world position at this fragment.
	vec3 world_position = CalculateWorldPosition(screen_coordinate, depth);

	//Calculate the noise texture coordinate.
	vec2 noise_texture_coordinate = vec2(gl_LaunchIDNV.xy) / 64.0f + vec2(activeNoiseTextureOffsetX, activeNoiseTextureOffsetY);

	//Sample the noise texture.
	vec4 noise_texture_sample = texture(sampler2D(GLOBAL_TEXTURES[activeNoiseTextureIndex], GLOBAL_SAMPLERS[GLOBAL_SAMPLER_FILTER_NEAREST_MIPMAP_MODE_NEAREST_ADDRESS_MODE_REPEAT_INDEX]), noise_texture_coordinate);

	//Calculate the shadows all shadow casting lights.
	vec4 shadows = vec4(1.0f);

	for (uint i = 0; i < NUMBER_OF_LIGHTS; ++i)
	{
		Light light = UnpackLight(i);

		switch (light.type)
		{
			case LIGHT_TYPE_DIRECTIONAL:
			{
				//Alter the direction a bit to simulate soft shadows.
				vec3 light_direction = normalize(light.position_or_direction + vec3(noise_texture_sample.xyz * 2.0f - 1.0f) * 0.01f);

				//Trace the visibility.
				bool hit_anything = false;

				if (!hit_anything && true)
				{
					visibility = 0.0f;

					traceNV(
							TERRAIN_TOP_LEVEL_ACCELERATION_STRUCTURE, 													//topLevel
							gl_RayFlagsTerminateOnFirstHitNV | gl_RayFlagsOpaqueNV | gl_RayFlagsSkipClosestHitShaderNV, //rayFlags
							0xff, 																						//cullMask
							0, 																							//sbtRecordOffset
							0, 																							//sbtRecordStride
							0, 																							//missIndex
							world_position, 																			//origin
							CATALYST_RAY_TRACING_T_MINIMUM, 															//Tmin
							-light_direction,																			//direction
							VIEW_DISTANCE,																				//Tmax
							1 																							//payload
							);

					hit_anything = visibility < 1.0f;
				}

				if (!hit_anything && true)
				{
					visibility = 0.0f;

					traceNV(
							STATIC_TOP_LEVEL_ACCELERATION_STRUCTURE, 													//topLevel
							gl_RayFlagsTerminateOnFirstHitNV | gl_RayFlagsOpaqueNV | gl_RayFlagsSkipClosestHitShaderNV, //rayFlags
							0xff, 																						//cullMask
							0, 																							//sbtRecordOffset
							0, 																							//sbtRecordStride
							0, 																							//missIndex
							world_position, 																			//origin
							CATALYST_RAY_TRACING_T_MINIMUM, 															//Tmin
							-light_direction,																			//direction
							VIEW_DISTANCE,																				//Tmax
							1 																							//payload
							);

					hit_anything = visibility < 1.0f;
				}

				if (!hit_anything && true)
				{
					visibility = 0.0f;

					traceNV(
							DYNAMIC_TOP_LEVEL_ACCELERATION_STRUCTURE, 													//topLevel
							gl_RayFlagsTerminateOnFirstHitNV | gl_RayFlagsOpaqueNV | gl_RayFlagsSkipClosestHitShaderNV, //rayFlags
							0xff, 																						//cullMask
							0, 																							//sbtRecordOffset
							0, 																							//sbtRecordStride
							0, 																							//missIndex
							world_position, 																			//origin
							CATALYST_RAY_TRACING_T_MINIMUM, 															//Tmin
							-light_direction,																			//direction
							VIEW_DISTANCE,																				//Tmax
							1 																							//payload
							);

					hit_anything = visibility < 1.0f;
				}

				//Write the shadows.
				shadows[i] = float(!hit_anything);

				break;
			}

			case LIGHT_TYPE_POINT:
			{
				//TODO

				break;
			}
		}
	}

    //Write to the image.
	imageStore(shadows_image, ivec2(gl_LaunchIDNV.xy), shadows);
}