//Includes.
#define CATALYST_LIGHTING_DATA_SET_INDEX (2)
#include "CatalystLightingData.glsl"
#include "CatalystRayTracingCore.glsl"
#include "CatalystRayTracingData.glsl"
#include "..\Include\Rendering\Native\Shader\CatalystVolumetricLighting.h"

//Constants.
#define CATALYST_VOLUMETRIC_LIGHTING_DENSITY_MULTIPLIER (0.125f)

//Push constant data.
layout (push_constant) uniform PushConstantData
{
	layout (offset = 0) uint NUMBER_OF_SAMPLES;
};

//Descriptor set data.
layout (set = 3, binding = 0, rgba32f) 	uniform image2D 	scene_image;
layout (set = 3, binding = 1, rgba8) 	uniform image2D 	scene_features_1_image;
layout (set = 3, binding = 2, rgba32f) 	uniform image2D 	scene_features_2_image;
layout (set = 3, binding = 3, rgba8) 	uniform image2D 	scene_features_3_image;
layout (set = 3, binding = 4, rg16f) 	uniform image2D 	scene_features_4_image;

//In parameters.
layout(location = 0) rayPayloadNV PathTracingRayPayload path_tracing_ray_payload;
layout(location = 1) rayPayloadNV float visibility;

/*
* Returns the screen coordinate with the given view matrix and world position.
*/
vec2 CalculateScreenCoordinate(mat4 givenWORLD_TO_CLIP_MATRIX, vec3 worldPosition)
{
  vec4 viewSpacePosition = givenWORLD_TO_CLIP_MATRIX * vec4(worldPosition, 1.0f);
  viewSpacePosition.xy /= viewSpacePosition.w;

  return viewSpacePosition.xy * 0.5f + 0.5f;
}

void CatalystShaderMain() 
{
	//Calculate the screen coordinate.
	vec2 screen_coordinate = (vec2(gl_LaunchIDNV.xy) + vec2(0.5f)) / vec2(gl_LaunchSizeNV.xy);

	//Accumulate the output data.
	vec3 radiance = vec3(0.0f, 0.0f, 0.0f);
	vec3 albedo = vec3(0.0f, 0.0f, 0.0f);
	vec3 shading_normal = vec3(0.0f, 1.0f, 0.0f);
	vec3 hit_position = vec3(0.0f);
	vec4 material_properties = vec4(0.0f, 0.0f, 0.0f, 0.0f);

	for (uint i = 0; i < NUMBER_OF_SAMPLES; ++i)
	{
		//Sample the noise texture.
		path_tracing_ray_payload.random_noise = SampleBlueNoiseTexture(uvec2(gl_LaunchIDNV.xy), i);

		//Generate the ray direction.
		vec3 ray_direction = CalculateRayDirection(screen_coordinate + vec2(path_tracing_ray_payload.random_noise.xy * 2.0f - 1.0f) * INVERSE_SCALED_RESOLUTION * 0.5f);

		//Sample the random hemisphere sample.
		vec3 random_hemisphere_direction;
		float random_length;

		SampleHammersleyHemisphereSample(uint(path_tracing_ray_payload.random_noise.w * 64.0f) + uint(gl_LaunchIDNV.x) + uint(gl_LaunchIDNV.y) + i, random_hemisphere_direction, random_length);

		path_tracing_ray_payload.random_hemisphere_sample = vec4(random_hemisphere_direction, random_length);

		//Reset the payload.
		path_tracing_ray_payload.current_recursion_depth = 0;
		path_tracing_ray_payload.hit_distance = VIEW_DISTANCE;

		//Fire the ray!
		traceNV(
				TOP_LEVEL_ACCELERATION_STRUCTURE,	//topLevel
				gl_RayFlagsOpaqueNV, 						//rayFlags
				0xff, 										//cullMask
				0, 											//sbtRecordOffset
				0, 											//sbtRecordStride
				0, 											//missIndex
				PERCEIVER_WORLD_POSITION, 					//origin
				CATALYST_RAY_TRACING_T_MINIMUM, 			//Tmin
				ray_direction, 								//direction
				VIEW_DISTANCE, 								//Tmax
				0 											//payload
				);

		radiance += path_tracing_ray_payload.radiance;
		albedo += path_tracing_ray_payload.albedo;
		shading_normal += path_tracing_ray_payload.shading_normal;
		hit_position += PERCEIVER_WORLD_POSITION + ray_direction * path_tracing_ray_payload.hit_distance;
		material_properties += path_tracing_ray_payload.material_properties;
	}

	//Normalize the output data.
	radiance /= float(NUMBER_OF_SAMPLES);
	albedo /= float(NUMBER_OF_SAMPLES);
	shading_normal /= float(NUMBER_OF_SAMPLES);
	hit_position /= float(NUMBER_OF_SAMPLES);
	material_properties /= float(NUMBER_OF_SAMPLES);

	//Calculate the velocity.
	vec2 velocity = CalculateScreenCoordinate(WORLD_TO_CLIP_MATRIX, hit_position) - CalculateScreenCoordinate(PREVIOUS_WORLD_TO_CLIP_MATRIX, hit_position);

	//Calculate the depth.
	vec4 clip_space_position = WORLD_TO_CLIP_MATRIX * vec4(hit_position, 1.0f);
	float depth = clip_space_position.z / clip_space_position.w;

	//Write to the images.
	imageStore(scene_image, 			ivec2(gl_LaunchIDNV.xy), vec4(radiance, 1.0f));
	imageStore(scene_features_1_image, 	ivec2(gl_LaunchIDNV.xy), vec4(albedo, 0.0f));
	imageStore(scene_features_2_image, 	ivec2(gl_LaunchIDNV.xy), vec4(shading_normal, depth));
	imageStore(scene_features_3_image, 	ivec2(gl_LaunchIDNV.xy), material_properties);
	imageStore(scene_features_4_image, 	ivec2(gl_LaunchIDNV.xy), vec4(velocity, 0.0f, 0.0f));
}