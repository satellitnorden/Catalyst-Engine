//Constants.
#define TERRAIN_MATERIAL_SCALE (0.5f)
#define TERRAIN_DISPLACEMENT_POWER (8.0f)
#define TERRAIN_MINIMUM_DISPLACEMENT_WEIGHT (FLOAT32_EPSILON)

/*
*   Terrain material struct definition.
*/
struct TerrainMaterial
{
    //The terrain normal.
    vec3 _TerrainNormal;

    //The terrain height.
    float _TerrainHeight;

    //The albedo.
    vec3 _Albedo;

    //The thickness.
    float _Thickness;

    //The normal map.
    vec3 _NormalMap;

    //The displacement.
    float _Displacement;

    //The material properties.
    vec4 _MaterialProperties;
};

/*
*   Calculates the material coordinate for the given world position.
*/
vec2 CalculateTerrainMaterialCoordinate(vec3 world_position, vec3 normal, vec2 tile_index)
{
#if 1
    //Take the absolute of the normal.
    vec3 absolute_normal = abs(normal);

    //Calculate the material coordinate.
    bool x_dominant = absolute_normal.x > absolute_normal.y && absolute_normal.x > absolute_normal.z;
    bool z_dominant = absolute_normal.z > absolute_normal.x && absolute_normal.z > absolute_normal.y;
    vec2 material_coordinate = world_position.yz * float(x_dominant) + world_position.xy * float(z_dominant) + world_position.xz * float(!x_dominant && !z_dominant);

    material_coordinate *= TERRAIN_MATERIAL_SCALE;

    //Calculate the random rotation.
    float random_rotation = mix(-PI, PI, RandomFloat(tile_index));

    //Randomly rotate the tile.
    material_coordinate -= tile_index;
    material_coordinate -= 0.5f;
    material_coordinate = RotateYaw(vec3(material_coordinate.x, 0.0f, material_coordinate.y), random_rotation).xz;
    material_coordinate += 0.5f;
    material_coordinate += tile_index;

    //Return the material_coordinate!
    return material_coordinate;
#else
    return vec2(world_position.x, world_position.z) * 0.5f;
#endif
}