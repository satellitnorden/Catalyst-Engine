/*
*	Calculates wind displacement.
*	Requires the Wind uniform buffer to be bound.
*/
vec3 CalculateWindDisplacement(vec3 world_position, vec3 vertex_position, vec3 normal, vec4 wind_direction_speed, float wind_time)
{
	//Calculate the displacement.
	vec3 displacement = vec3(0.0f, 0.0f, 0.0f);

	//Add large scale motion.
	displacement.x += (sin(world_position.x + wind_time) + 0.25f) * wind_direction_speed.x * wind_direction_speed.w;
	displacement.z += (cos(world_position.z + wind_time) + 0.25f) * wind_direction_speed.z * wind_direction_speed.w;

	//Add medium scale motion.
	displacement.x += (sin((world_position.x + wind_time) * 2.0f) + 0.375f) * wind_direction_speed.x * wind_direction_speed.w * 0.5f;
	displacement.z += (cos((world_position.z + wind_time) * 2.0f) + 0.375f) * wind_direction_speed.z * wind_direction_speed.w * 0.5f;

	//Add small scale motion.
	displacement.x += (sin((world_position.x + wind_time) * 4.0f) + 0.5f) * wind_direction_speed.x * wind_direction_speed.w * 0.25f;
	displacement.z += (cos((world_position.z + wind_time) * 4.0f) + 0.5f) * wind_direction_speed.z * wind_direction_speed.w * 0.25f;

	//Modify the displacement so it doesn't affect the bottom of the mesh.
	displacement *= max(vertex_position.y * 0.125f, 0.0f);

	//Return the displacement.
	return displacement;
}

/*
*	Calculates previous wind displacement.
*	Requires the Wind uniform buffer to be bound.
*/
vec3 CalculatePreviousWindDisplacement(vec3 world_position, vec3 vertex_position, vec3 normal)
{
	return CalculateWindDisplacement(world_position, vertex_position, normal, PREVIOUS_WIND_DIRECTION_SPEED, PREVIOUS_WIND_TIME);
}

/*
*	Calculates current wind displacement.
*	Requires the Wind uniform buffer to be bound.
*/
vec3 CalculateCurrentWindDisplacement(vec3 world_position, vec3 vertex_position, vec3 normal)
{
	return CalculateWindDisplacement(world_position, vertex_position, normal, CURRENT_WIND_DIRECTION_SPEED, CURRENT_WIND_TIME);
}