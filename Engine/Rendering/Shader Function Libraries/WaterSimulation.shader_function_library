/*
*	Calculates the water height at the given position.
*/
float WaterHeightAtPosition(vec3 world_position, uint texture_index, float current_time)
{
    #define AMPLITUDE (1.0f)

	float water_texture_sample_1 = texture(sampler2D(TEXTURES[texture_index], SAMPLER), world_position.xz * 0.125f + WATER_OFFSETS[0]).x;
    float water_texture_sample_2 = texture(sampler2D(TEXTURES[texture_index], SAMPLER), world_position.xz * 0.25f + WATER_OFFSETS[1]).y;
    float water_texture_sample_3 = texture(sampler2D(TEXTURES[texture_index], SAMPLER), world_position.xz * 0.5f + WATER_OFFSETS[2]).z;
    float water_texture_sample_4 = texture(sampler2D(TEXTURES[texture_index], SAMPLER), world_position.xz * 1.0f + WATER_OFFSETS[3]).w;

    return  (water_texture_sample_1 * 1.0f
            + water_texture_sample_2 * 0.5f
            + water_texture_sample_3 * 0.25f
            + water_texture_sample_4 * 0.125f)
            / 1.875f * AMPLITUDE;
}

/*
*	Calculates the water height at the given position.
*/
vec3 WaterNormalAtPosition(vec3 world_position, uint texture_index, float current_time)
{
	float left = WaterHeightAtPosition(world_position + vec3(-1.0f, 0.0f, 0.0f), texture_index, current_time);
	float right = WaterHeightAtPosition(world_position + vec3(1.0f, 0.0f, 0.0f), texture_index, current_time);
	float down = WaterHeightAtPosition(world_position + vec3(0.0f, 0.0f, -1.0f), texture_index, current_time);
	float up = WaterHeightAtPosition(world_position + vec3(0.0f, 0.0f, 1.0f), texture_index, current_time);

	return normalize(vec3(left - right, 2.0f, down - up));
}