//Declare unifom buffer includes.
IncludeUniformBuffer(Camera);

//Declare output depth buffer.
OutputDepthBuffer(SceneDepthBuffer);

//Declare output render targets.
OutputRenderTarget(SceneLowDynamicRange1);

//Declare render resolution.
RenderResolution(MAIN_FULL);

//Set the load/store operators.
ColorLoadOperator(LOAD);
ColorStoreOperator(STORE);
DepthStencilLoadOperator(LOAD);
DepthStencilStoreOperator(STORE);

//Set the polygon mode.
PolygonMode(LINE);

//Set the cull mode.
CullMode(NONE);

//Set depth/stencil properties.
DepthCompareOperator(GREATER_OR_EQUAL);
DepthTestEnable();

//Set the topology.
Topology(TRIANGLE_STRIP);

//Set blend properties.
BlendEnable();
BlendColorSourceFactor(SOURCE_ALPHA);
BlendColorDestinationFactor(ONE_MINUS_SOURCE_ALPHA);
BlendColorOperator(ADD);
BlendAlphaSourceFactor(ONE);
BlendAlphaDestinationFactor(ZERO);
BlendAlphaOperator(ADD);

//Declare push constant data.
PushConstantData(mat4, TRANSFORMATION);
PushConstantData(vec3, COLOR);

//Subscribe to input streams.
SubscribeToInputStream(StaticModelWireframe);

//The vertex shader.
Vertex
{
    //Declare input parameters.
    InputParameter(vec3, InPosition);
    InputParameter(vec3, InNormal);
    InputParameter(vec3, InTangent);
    InputParameter(vec2, InTextureCoordinate);

    //Calculate the world position.
    vec3 world_position = vec3(TRANSFORMATION * vec4(InPosition, 1.0f));

    //Output the position.
    OutputVertexPosition(WORLD_TO_CLIP_MATRIX * vec4(world_position, 1.0f));
}

//The fragment shader.
Fragment
{
    //Output the fragment.
    OutputFragment(SceneLowDynamicRange1, vec4(COLOR, 0.5f));
}