//Declare unifom buffer includes.
IncludeUniformBuffer(Camera);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(Math);
IncludeShaderFunctionLibrary(Noise);
IncludeShaderFunctionLibrary(Terrain);

//Declare output depth buffer.
OutputDepthBuffer(SceneDepthBuffer);

//Declare output render targets.
OutputRenderTarget(SceneLowDynamicRange1);

//Declare render resolution.
RenderResolution(MAIN_FULL);

//Set the polygon mode.
PolygonMode(LINE);

//Set the cull mode.
CullMode(NONE);

//Set the load/store operators.
DepthStencilLoadOperator(LOAD);
DepthStencilStoreOperator(STORE);
ColorLoadOperator(LOAD);
ColorStoreOperator(STORE);

//Set depth/stencil properties.
DepthCompareOperator(GREATER_OR_EQUAL);
DepthTestEnable();

//Set the topology.
Topology(TRIANGLE_LIST);

//Set blend properties.
BlendEnable();
BlendColorSourceFactor(SOURCE_ALPHA);
BlendColorDestinationFactor(ONE_MINUS_SOURCE_ALPHA);
BlendColorOperator(ADD);
BlendAlphaSourceFactor(ONE);
BlendAlphaDestinationFactor(ZERO);
BlendAlphaOperator(ADD);

//Declare push constant data.
PushConstantData(vec3, COLOR);
PushConstantData(vec2, WORLD_POSITION);
PushConstantData(vec2, MINIMUM_HEIGHT_MAP_COORDINATE);
PushConstantData(vec2, MAXIMUM_HEIGHT_MAP_COORDINATE);
PushConstantData(uint, BORDERS);
PushConstantData(float, PATCH_RESOLUTION_RECIPROCAL);
PushConstantData(float, PATCH_SIZE);
PushConstantData(uint, HEIGHT_MAP_TEXTURE_INDEX);
PushConstantData(uint, NORMAL_MAP_TEXTURE_INDEX);
PushConstantData(uint, INDEX_MAP_TEXTURE_INDEX);
PushConstantData(uint, BLEND_MAP_TEXTURE_INDEX);
PushConstantData(float, MAP_RESOLUTION);
PushConstantData(float, MAP_RESOLUTION_RECIPROCAL);

//Subscribe to input streams.
SubscribeToInputStream(TerrainWireframe);

//Declare samplers.
Sampler(HEIGHT_MAP_SAMPLER /* Name */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */, 0 /* Anisotropic Samples */);
Sampler(NORMAL_MAP_SAMPLER /* Name */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */, 0 /* Anisotropic Samples */);
Sampler(INDEX_BLEND_MAP_SAMPLER /* Name */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */, 0 /* Anisotropic Samples */);
Sampler(MATERIAL_SAMPLER /* Name */, LINEAR /* Magnification Filter */, LINEAR /* Mipmap Mode */, REPEAT /* Address Mode */, 8 /* Anisotropic Samples */);

//The vertex shader.
Vertex
{
    //Declare input parameters.
    InputParameter(vec2, InPosition);
    InputParameter(uint, InBorders);

    //Calculate the stitched position.
    vec2 stitched_position = InPosition;

    //Apply the first layer of stiching.
    {
	    float is_left_multiplier = float((InBorders & BIT(0)) & (BORDERS & BIT(0)));
    	float is_right_multiplier = float((InBorders & BIT(2)) & (BORDERS & BIT(2)));
	    float vertical_offset = min(is_left_multiplier + is_right_multiplier, 1.0f);

        float is_down_multiplier = float((InBorders & BIT(4)) & (BORDERS & BIT(4)));
    	float is_up_multiplier = float((InBorders & BIT(6)) & (BORDERS & BIT(6)));
	    float horizontal_offset = min(is_down_multiplier + is_up_multiplier, 1.0f);

	    stitched_position.y -= PATCH_RESOLUTION_RECIPROCAL * vertical_offset;
	    stitched_position.x -= PATCH_RESOLUTION_RECIPROCAL * horizontal_offset;
    }

    //Apply the second layer of stiching.
    {
	    float is_left_multiplier = float((InBorders & BIT(1)) & (BORDERS & BIT(1)));
    	float is_right_multiplier = float((InBorders & BIT(3)) & (BORDERS & BIT(3)));
	    float vertical_offset = min(is_left_multiplier + is_right_multiplier, 1.0f);

        float is_down_multiplier = float((InBorders & BIT(5)) & (BORDERS & BIT(5)));
    	float is_up_multiplier = float((InBorders & BIT(7)) & (BORDERS & BIT(7)));
	    float horizontal_offset = min(is_down_multiplier + is_up_multiplier, 1.0f);

	    stitched_position.y -= (PATCH_RESOLUTION_RECIPROCAL * 2.0f) * vertical_offset;
	    stitched_position.x -= (PATCH_RESOLUTION_RECIPROCAL * 2.0f) * horizontal_offset;
    }

    //Calculate the height map coordinate.
    vec2 height_map_coordinate = vec2(mix(MINIMUM_HEIGHT_MAP_COORDINATE.x, MAXIMUM_HEIGHT_MAP_COORDINATE.x, stitched_position.x), mix(MINIMUM_HEIGHT_MAP_COORDINATE.y, MAXIMUM_HEIGHT_MAP_COORDINATE.y, stitched_position.y));

    //Calculate the world position.
    vec3 world_position;

    world_position.x = WORLD_POSITION.x + mix(-(PATCH_SIZE * 0.5f), (PATCH_SIZE * 0.5f), stitched_position.x);
    world_position.y = 0.0f;
    world_position.z = WORLD_POSITION.y + mix(-(PATCH_SIZE * 0.5f), (PATCH_SIZE * 0.5f), stitched_position.y);

    //Sample the heightmap.
    {
        float height_1 = texture(sampler2D(TEXTURES[HEIGHT_MAP_TEXTURE_INDEX], HEIGHT_MAP_SAMPLER), height_map_coordinate + vec2(0.0f, 0.0f) * MAP_RESOLUTION_RECIPROCAL).x;
        float height_2 = texture(sampler2D(TEXTURES[HEIGHT_MAP_TEXTURE_INDEX], HEIGHT_MAP_SAMPLER), height_map_coordinate + vec2(0.0f, 1.0f) * MAP_RESOLUTION_RECIPROCAL).x;
        float height_3 = texture(sampler2D(TEXTURES[HEIGHT_MAP_TEXTURE_INDEX], HEIGHT_MAP_SAMPLER), height_map_coordinate + vec2(1.0f, 0.0f) * MAP_RESOLUTION_RECIPROCAL).x;
        float height_4 = texture(sampler2D(TEXTURES[HEIGHT_MAP_TEXTURE_INDEX], HEIGHT_MAP_SAMPLER), height_map_coordinate + vec2(1.0f, 1.0f) * MAP_RESOLUTION_RECIPROCAL).x;
    
        float blend_1 = mix(height_1, height_2, fract(height_map_coordinate.y * MAP_RESOLUTION));
	    float blend_2 = mix(height_3, height_4, fract(height_map_coordinate.y * MAP_RESOLUTION));

	    float final_height = mix(blend_1, blend_2, fract(height_map_coordinate.x * MAP_RESOLUTION));

        world_position.y = final_height;
    }
    
    //Sample the normal map.
    vec3 normals[4];
    vec3 normal;

    {
        normals[0] = texture(sampler2D(TEXTURES[NORMAL_MAP_TEXTURE_INDEX], NORMAL_MAP_SAMPLER), height_map_coordinate + vec2(0.0f, 0.0f) * MAP_RESOLUTION_RECIPROCAL).xyz;
        normals[1] = texture(sampler2D(TEXTURES[NORMAL_MAP_TEXTURE_INDEX], NORMAL_MAP_SAMPLER), height_map_coordinate + vec2(0.0f, 1.0f) * MAP_RESOLUTION_RECIPROCAL).xyz;
        normals[2] = texture(sampler2D(TEXTURES[NORMAL_MAP_TEXTURE_INDEX], NORMAL_MAP_SAMPLER), height_map_coordinate + vec2(1.0f, 0.0f) * MAP_RESOLUTION_RECIPROCAL).xyz;
        normals[3] = texture(sampler2D(TEXTURES[NORMAL_MAP_TEXTURE_INDEX], NORMAL_MAP_SAMPLER), height_map_coordinate + vec2(1.0f, 1.0f) * MAP_RESOLUTION_RECIPROCAL).xyz;
    
        vec3 blend_1 = mix(normals[0], normals[1], fract(height_map_coordinate.y * MAP_RESOLUTION));
	    vec3 blend_2 = mix(normals[2], normals[3], fract(height_map_coordinate.y * MAP_RESOLUTION));

	    normal = mix(blend_1, blend_2, fract(height_map_coordinate.x * MAP_RESOLUTION));
        normal = normal * 2.0f - 1.0f;
        normal = normalize(normal);
    }

    //Calculate the displacement multiplier.
    float displacement_multiplier = 1.0f - min(length(world_position - CAMERA_WORLD_POSITION) / 64.0f, 1.0f);

    //Apply displacement.
    if (displacement_multiplier > 0.0f)
    {
        //Calculate the base coordinate.
        vec2 base_coordinate = vec2
        (
            float(uint(height_map_coordinate.x * MAP_RESOLUTION)) + 0.5f,
            float(uint(height_map_coordinate.y * MAP_RESOLUTION)) + 0.5f
        ) * MAP_RESOLUTION_RECIPROCAL;

        //Set up the sample coordinates.
        vec2 sample_coordinates[4];
    
        sample_coordinates[0] = base_coordinate + vec2(0.0f, 0.0f) * MAP_RESOLUTION_RECIPROCAL;
        sample_coordinates[1] = base_coordinate + vec2(0.0f, 1.0f) * MAP_RESOLUTION_RECIPROCAL;
        sample_coordinates[2] = base_coordinate + vec2(1.0f, 0.0f) * MAP_RESOLUTION_RECIPROCAL;
        sample_coordinates[3] = base_coordinate + vec2(1.0f, 1.0f) * MAP_RESOLUTION_RECIPROCAL;

        //Sample the displacements.
        float displacements[4];

        for (uint sample_index = 0; sample_index < 4; ++sample_index)
        {
            //Sample the terrain normal.
            vec3 terrain_normal = texture(sampler2D(TEXTURES[NORMAL_MAP_TEXTURE_INDEX], NORMAL_MAP_SAMPLER), sample_coordinates[sample_index]).xyz * 2.0f - 1.0f;

            //Sample the index map.
            vec4 index_map = texture(sampler2D(TEXTURES[INDEX_MAP_TEXTURE_INDEX], INDEX_BLEND_MAP_SAMPLER), sample_coordinates[sample_index]);

            //Sample the blend map.
            vec4 blend_map = texture(sampler2D(TEXTURES[BLEND_MAP_TEXTURE_INDEX], INDEX_BLEND_MAP_SAMPLER), sample_coordinates[sample_index]);

            //Retrieve the materials.
            Material materials[4];
            materials[0] = MATERIALS[uint(index_map[0] * float(UINT8_MAXIMUM))];
            materials[1] = MATERIALS[uint(index_map[1] * float(UINT8_MAXIMUM))];
            materials[2] = MATERIALS[uint(index_map[2] * float(UINT8_MAXIMUM))];
            materials[3] = MATERIALS[uint(index_map[3] * float(UINT8_MAXIMUM))];

            //Calculate the material texture coordinate.
            vec2 material_texture_coordinate = CalculateTerrainMaterialCoordinate(world_position, terrain_normal, sample_coordinates[sample_index] * MAP_RESOLUTION * TERRAIN_MATERIAL_SCALE);

            //Sample the normal map/displacements.
            vec4 normal_map_displacements[4];

            EVALUATE_NORMAL_MAP_DISPLACEMENT(materials[0], material_texture_coordinate, MATERIAL_SAMPLER, normal_map_displacements[0]);
            EVALUATE_NORMAL_MAP_DISPLACEMENT(materials[1], material_texture_coordinate, MATERIAL_SAMPLER, normal_map_displacements[1]);
            EVALUATE_NORMAL_MAP_DISPLACEMENT(materials[2], material_texture_coordinate, MATERIAL_SAMPLER, normal_map_displacements[2]);
            EVALUATE_NORMAL_MAP_DISPLACEMENT(materials[3], material_texture_coordinate, MATERIAL_SAMPLER, normal_map_displacements[3]);

            //Calculate the weights.
            float weights[4];
            float weights_sum = 0.0f;

            for (uint weight_index = 0; weight_index < 4; ++weight_index)
            {
                weights[weight_index] = max(pow(blend_map[weight_index] * normal_map_displacements[weight_index].w, TERRAIN_DISPLACEMENT_POWER), TERRAIN_MINIMUM_DISPLACEMENT_WEIGHT);
                weights_sum += weights[weight_index];
            }

            //Calculate the weights sum reciprocal.
            float weights_sum_reciprocal = 1.0f / weights_sum;

            //Normalize all weights.
            for (uint weight_index = 0; weight_index < 4; ++weight_index)
            {
                weights[weight_index] *= weights_sum_reciprocal;
            }

            //Calculate the displacement.
            displacements[sample_index] =   normal_map_displacements[0].w * weights[0]
                                            + normal_map_displacements[1].w * weights[1]
                                            + normal_map_displacements[2].w * weights[2]
                                            + normal_map_displacements[3].w * weights[3];
        }

        //Calculate the horizontal/vertical weight.
        float horizontal_weight = fract(height_map_coordinate.x * MAP_RESOLUTION);
        float vertical_weight = fract(height_map_coordinate.y * MAP_RESOLUTION);

        //Calculate the weights.
        float weights[4];

        {
            weights[0] = (1.0f - horizontal_weight) * (1.0f - vertical_weight);
            weights[1] = (1.0f - horizontal_weight) * (vertical_weight);
            weights[2] = (horizontal_weight) * (1.0f - vertical_weight);
            weights[3] = (horizontal_weight) * (vertical_weight);

            float weights_sum = 0.0f;

            for (uint weight_index = 0; weight_index < 4; ++weight_index)
            {
                weights[weight_index] = max(pow(weights[weight_index] * displacements[weight_index], TERRAIN_DISPLACEMENT_POWER), TERRAIN_MINIMUM_DISPLACEMENT_WEIGHT);
                weights_sum += weights[weight_index];
            }

            //Calculate the weights sum reciprocal.
            float weights_sum_reciprocal = 1.0f / weights_sum;

            //Normalize all weights.
            for (uint weight_index = 0; weight_index < 4; ++weight_index)
            {
                weights[weight_index] *= weights_sum_reciprocal;
            }
        }

        //Calculate the final displacement!
	    float final_displacement =  displacements[0] * weights[0]
                                    + displacements[1] * weights[1]
                                    + displacements[2] * weights[2]
                                    + displacements[3] * weights[3];

        //Apply the displacement!
        world_position += normal * mix(-0.125f, 0.1875f, final_displacement) * displacement_multiplier; //Slight bias for upward displacement.
    }

    //Output the position.
    OutputVertexPosition(WORLD_TO_CLIP_MATRIX * vec4(world_position, 1.0f));
}

//The fragment shader.
Fragment
{
    //Output the fragment.
    OutputFragment(SceneLowDynamicRange1, vec4(COLOR, 0.5f));
}