//Declare uniform buffer includes.
IncludeUniformBuffer(Camera);
IncludeUniformBuffer(General);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(Camera);

//Declare input render targets.
InputRenderTarget(SceneFeatures2Half /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(InputDiffuseIrradiance /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);

//Declare output render targets.
OutputRenderTarget(OutputDiffuseIrradiance);

//Declare render resolution.
RenderResolution(MAIN_HALF);

//Set the load/store operators.
ColorStoreOperator(STORE);

//Set the topology.
Topology(TRIANGLE_FAN);

//Declare push constant data.
PushConstantData(uint, DIRECTION);

//The vertex shader.
IncludeCommonVertexShader(ViewportScreenCoordinate);

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec2, InScreenCoordinate);

	//Sample the scene features.
	vec4 center_scene_features_2 = texture(SceneFeatures2Half, InScreenCoordinate);

	vec3 center_normal = center_scene_features_2.xyz;
	float center_depth = LinearizeDepth(center_scene_features_2.w);

    //Sample neighboring fragments.
	vec3 denoised_diffuse_irradiance = vec3(0.0f);
	float weight_sum = 0.0f;

	for (int sample_index = -4; sample_index <= 4; ++sample_index)
	{
		//Calculate the sample coordinate.
		vec2 sample_coordinate = InScreenCoordinate + vec2(float(sample_index) * float(DIRECTION == 0), float(sample_index) * float(DIRECTION == 1)) * INVERSE_HALF_MAIN_RESOLUTION;

		//Sample the diffuse irradiance.
		vec3 sample_diffuse_irradiance = texture(InputDiffuseIrradiance, sample_coordinate).rgb;

		//Sample the scene features.
		vec4 sample_scene_features_2 = texture(SceneFeatures2Half, sample_coordinate);

		vec3 sample_normal = sample_scene_features_2.xyz;
		float sample_depth = LinearizeDepth(sample_scene_features_2.w);

		/*
		*	Calculate the sample weight based on certain criteria;
		*	
		*	1. Is the sample coordinate a valid screen coordinate?
		*	2. How closely aligned are the normals to each other?
		*	3. How closely aligned are the linearized depths to each other?
		*/
		float sample_weight = 1.0f;

		sample_weight *= float(ValidScreenCoordinate(sample_coordinate));
		sample_weight *= max(dot(center_normal, sample_normal), 0.0f);
		sample_weight *= 1.0f - min(abs(center_depth - sample_depth), 1.0f);

		denoised_diffuse_irradiance += sample_diffuse_irradiance * sample_weight;
		weight_sum += sample_weight;
	}
	
	//Normalize the denoised diffuse irradiance. 
	denoised_diffuse_irradiance = denoised_diffuse_irradiance / weight_sum;

    //Write the fragment.
    OutputFragment(OutputDiffuseIrradiance, vec4(denoised_diffuse_irradiance, 1.0f));
}