//Declare uniform buffer includes.
IncludeUniformBuffer(Camera);
IncludeUniformBuffer(General);
IncludeUniformBuffer(HammersleyHemisphereSamples);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(BlueNoise);
IncludeShaderFunctionLibrary(Camera);
IncludeShaderFunctionLibrary(Math);
IncludeShaderFunctionLibrary(Noise);

//Declare input render targets.
InputRenderTarget(SceneFeatures2Half /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);

//Declare output render targets.
OutputRenderTarget(AmbientOcclusion);

//Declare render resolution.
RenderResolution(MAIN_HALF);

//Set the load/store operators.
ColorStoreOperator(STORE);

//Set the topology.
Topology(TRIANGLE_FAN);

//Declare push constant data.
PushConstantData(uint, NUMBER_OF_SAMPLES);

//Subscribe to input streams.
SubscribeToInputStream(ScreenSpaceAmbientOcclusion);

//The vertex shader.
IncludeCommonVertexShader(ViewportScreenCoordinate);

//The fragment shader.
Fragment
{
    //Constants.
    #define AMBIENT_OCCLUSION_RADIUS (1.0f)

    //Declare input parameters.
    InputParameter(vec2, InScreenCoordinate);

    //Sample the scene features.
    vec4 scene_features_2 = texture(SceneFeatures2Half, InScreenCoordinate);
    vec3 normal = scene_features_2.xyz;
    float depth = scene_features_2.w;

    //Calculate the world position.
    vec3 world_position = CalculateWorldPosition(InScreenCoordinate, depth);

    //Sample the noise texture.
	vec4 noise_texture_sample = SampleBlueNoiseTexture(uvec2(FRAGMENT_COORDINATE.xy), 0);

    //Calculate the random hemisphere sample start index.
	uint random_hemisphere_sample_start_index = uint(noise_texture_sample.w * 64.0f);

    //Initialize the random rotation.
    mat3 random_rotation = CalculateGramSchmidtRotationMatrix(normal, noise_texture_sample.xyz * 2.0f - 1.0f);

	//Calculate the ambient occlusion.
	float ambient_occlusion = 0.0f;

    for (uint i = 0; i < NUMBER_OF_SAMPLES; ++i)
    {
        //Retrieve the random hemisphere sample.
        vec4 random_hemisphere_sample = HAMMERSLEY_UNIFORM_SAMPLES[(random_hemisphere_sample_start_index + i) & 63];
        
        //Set the random direction.
        vec3 random_direction = random_hemisphere_sample.xyz;

        //Apply the random rotation.
        random_direction = random_rotation * random_direction;

		//Flip the direction, if needed.
		random_direction = dot(random_direction, normal) >= 0.0f ? random_direction : -random_direction;

        //Set the random length.
        float random_length = InterleavedGradientNoise(uvec2(FRAGMENT_COORDINATE.xy), i);

		//Calculate the sample position.
		vec3 sample_position = world_position + random_direction * random_length * AMBIENT_OCCLUSION_RADIUS;

		//Calculate the sample screen coordinate.
		vec4 sample_view_space_position = WORLD_TO_CLIP_MATRIX * vec4(sample_position, 1.0f);
		float sample_screen_coordinate_inverse_denominator = 1.0f / sample_view_space_position.w;
		vec2 sample_screen_coordinate = sample_view_space_position.xy * sample_screen_coordinate_inverse_denominator * 0.5f + 0.5f;
        float expected_depth = LinearizeDepth(sample_view_space_position.z * sample_screen_coordinate_inverse_denominator);

		//Sample the depth.
		float sample_depth = texture(SceneFeatures2Half, sample_screen_coordinate).w;

        //Linearize the sample depth.
        float linearized_sample_depth = LinearizeDepth(sample_depth);

        //Calculate the sample world position.
        vec3 sample_world_position = CalculateWorldPosition(sample_screen_coordinate, sample_depth);

        //Calculate the sample direction.
        vec3 sample_direction = normalize(sample_world_position - world_position);

		//Calculate the distance falloff.
		float distance_falloff = SmoothStep(1.0f - (min(abs(expected_depth - linearized_sample_depth), AMBIENT_OCCLUSION_RADIUS) / AMBIENT_OCCLUSION_RADIUS));

		//Calculate the sample ambient occlusion.
        float sample_ambient_occlusion = max(dot(sample_direction, normal), 0.0f) * distance_falloff;
        ambient_occlusion += sample_ambient_occlusion;
    }

    //Normalize the ambient occlusion.
	ambient_occlusion = 1.0f - (ambient_occlusion / float(NUMBER_OF_SAMPLES));

    //Write the fragment
    OutputFragment(AmbientOcclusion, vec4(ambient_occlusion));
}