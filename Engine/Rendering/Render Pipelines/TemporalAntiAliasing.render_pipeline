//Declare uniform buffer includes.
IncludeUniformBuffer(Camera);
IncludeUniformBuffer(General);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(Camera);
IncludeShaderFunctionLibrary(Temporal);

//Declare input render targets.
InputRenderTarget(SceneFeatures2 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneFeatures4 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneNearest /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneLinear /* Identifier */, LINEAR /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(PreviousTemporalBuffer /* Identifier */, LINEAR /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);

//Declare output render targets.
OutputRenderTarget(CurrentTemporalBuffer);
OutputRenderTarget(CurrentScene);

//Declare render resolution.
RenderResolution(MAIN_FULL);

//Set the load/store operators.
ColorStoreOperator(STORE);

//Set the topology.
Topology(TRIANGLE_FAN);

//Subscribe to input streams.
SubscribeToInputStream(Viewport);

//The vertex shader.
IncludeCommonVertexShader(ViewportScreenCoordinate);

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec2, InScreenCoordinate);

	//Constants.
	#define FEEDBACK_FACTOR (0.9f)

    //Calculate the minimum/maximum color values in the neighborhood of the current frame. Also find the velocity of the closest fragment.
	float closest_depth = 0.0f;
	vec2 closest_velocity = vec2(0.0f);
	vec3 minimum = vec3(1.0f);
	vec3 maximum = vec3(0.0f);

	for (int Y = -1; Y <= 1; ++Y)
	{
		for (int X = -1; X <= 1; ++X)
		{
			vec2 sample_coordinate = InScreenCoordinate + vec2(float(X), float(Y)) * INVERSE_FULL_MAIN_RESOLUTION;
			
			vec3 neighbordhood_sample = texture(SceneNearest, sample_coordinate).rgb;

			minimum = min(minimum, neighbordhood_sample);
			maximum = max(maximum, neighbordhood_sample);

			float neighborhood_depth = texture(SceneFeatures2, sample_coordinate).w;

			if (closest_depth < neighborhood_depth)
			{
				closest_depth = neighborhood_depth;
				closest_velocity = texture(SceneFeatures4, sample_coordinate).xy;
			}
		}
	}

	//Calculate the previous screen coordinate.
	vec2 previous_screen_coordinate = InScreenCoordinate - closest_velocity;

	//Sample the previous frame texture.
	vec3 previous_frame = texture(PreviousTemporalBuffer, previous_screen_coordinate).rgb;

	//Constraint the previous frame.
	previous_frame = Constrain(previous_frame, minimum, maximum);

	/*
	*	Calculate the weight between the current frame and the history depending on certain criteria.
	*
	*	1. Is the sample coordinate valid?
	*/
	float previous_frame_weight = 1.0f;

	previous_frame_weight *= float(ValidScreenCoordinate(previous_screen_coordinate));

	//Sample the current frame.
	vec3 current_frame = texture(SceneLinear, InScreenCoordinate + CURRENT_FRAME_JITTER).rgb;

	//Blend the frames.
	vec3 blended_frame = mix(current_frame, previous_frame, previous_frame_weight * FEEDBACK_FACTOR);

    //Output the fragments.
    OutputFragment(CurrentTemporalBuffer, vec4(blended_frame, 1.0f));
    OutputFragment(CurrentScene, vec4(blended_frame, 1.0f));
}