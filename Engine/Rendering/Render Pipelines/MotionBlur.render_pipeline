//Declare uniform buffer includes.
IncludeUniformBuffer(Camera);
IncludeUniformBuffer(General);
IncludeUniformBuffer(PostProcessing);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(BlueNoise);

//Declare input render targets.
InputRenderTarget(SceneFeatures4 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneLowDynamicRange1 /* Identifier */, LINEAR /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);

//Declare output render targets.
OutputRenderTarget(SceneLowDynamicRange2);

//Declare render resolution.
RenderResolution(MAIN_FULL);

//Set the load/store operators.
ColorStoreOperator(STORE);

//Set the topology.
Topology(TRIANGLE_FAN);

//Subscribe to input streams.
SubscribeToInputStream(Viewport);

//The vertex shader.
IncludeCommonVertexShader(ViewportScreenCoordinate);

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec2, InScreenCoordinate);

    //Constants.
    #define NUMBER_OF_SAMPLES (8)

    //Retrieve the velocity.
    vec2 velocity = texture(SceneFeatures4, InScreenCoordinate).xy;

    //Calculate the blur direction.
    vec2 blur_direction = velocity * -1.0f * MOTION_BLUR_INTENSITY;

    //Calculate the offsets.
    float offsets[NUMBER_OF_SAMPLES];

    for (uint i = 0; i < NUMBER_OF_SAMPLES; i += 4)
    {
        vec4 blue_noise_texture_sample = SampleBlueNoiseTexture(uvec2(FRAGMENT_COORDINATE.xy), i / 4);
        
        offsets[i * 4 + 0] = blue_noise_texture_sample.x;
        offsets[i * 4 + 1] = blue_noise_texture_sample.y;
        offsets[i * 4 + 2] = blue_noise_texture_sample.z;
        offsets[i * 4 + 3] = blue_noise_texture_sample.w;
    }

    //Sample the center scene.
    vec3 center_scene = texture(SceneLowDynamicRange1, InScreenCoordinate).rgb;

    //Blur the scene in the blur direction.
    vec3 blurred_scene = vec3(0.0f);
    float weight = 0.0f;

    if (MOTION_BLUR_INTENSITY > 0.0f)
    {
        for (uint i = 0; i < NUMBER_OF_SAMPLES; ++i)
        {
            vec2 sample_coordinate = InScreenCoordinate + blur_direction * offsets[i];
            vec3 _sample = texture(SceneLowDynamicRange1, sample_coordinate).rgb;
            float sample_weight = float(ValidScreenCoordinate(sample_coordinate));

            blurred_scene += _sample * sample_weight;
            weight += sample_weight;
        }
    }

    //Normalize the blurred scene.
    blurred_scene = weight > 0.0f ? blurred_scene / float(weight) : center_scene;

    //Output the fragment.
    OutputFragment(SceneLowDynamicRange2, vec4(blurred_scene, 1.0f));
}