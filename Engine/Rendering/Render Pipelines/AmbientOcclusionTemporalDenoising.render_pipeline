//Declare uniform buffer includes.
IncludeUniformBuffer(Camera);
IncludeUniformBuffer(General);

//Declare input render targets.
InputRenderTarget(PreviousTemporalBuffer /* Identifier */, LINEAR /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(InputAmbientOcclusion /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneFeatures4Half /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);

//Declare output render targets.
OutputRenderTarget(CurrentTemporalBuffer);
OutputRenderTarget(OutputAmbientOcclusion);

//Declare render resolution.
RenderResolution(MAIN_HALF);

//Set the load/store operators.
ColorStoreOperator(STORE);

//Set the topology.
Topology(TRIANGLE_FAN);

//Subscribe to input streams.
SubscribeToInputStream(Viewport);

//The vertex shader.
IncludeCommonVertexShader(ViewportScreenCoordinate);

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec2, InScreenCoordinate);

    /*
    *   Calculate the minimum/maximum ambient occlusion values in the neighborhood of the current frame.
    *   Also retrieve the current ambient occlusion here.
    */
    float current_ambient_occlusion = 0.0f;
	float minimum_ambient_occlusion = 1.0f;
	float maximum_ambient_occlusion = 0.0f;

	for (int x = -1; x <= 1; ++x)
	{
		for (int y = -1; y <= 1; ++y)
		{
			vec2 sample_coordinate = InScreenCoordinate + vec2(float(x), float(y)) * INVERSE_HALF_MAIN_RESOLUTION;
		
			float neighborhood_sample = texture(InputAmbientOcclusion, sample_coordinate).x;

            current_ambient_occlusion += neighborhood_sample * float(x == 0 && y == 0);
			minimum_ambient_occlusion = min(minimum_ambient_occlusion, neighborhood_sample);
			maximum_ambient_occlusion = max(maximum_ambient_occlusion, neighborhood_sample);
		}
	}

    //Calculate the previous screen coordinate.
    vec2 previous_screen_coordinate = InScreenCoordinate - texture(SceneFeatures4Half, InScreenCoordinate).xy;

    //Sample the previous ambient occlusion.
    float previous_ambient_occlusion = texture(PreviousTemporalBuffer, previous_screen_coordinate).x;

    //Constrain the previous ambient occlusion.
    previous_ambient_occlusion = clamp(previous_ambient_occlusion, minimum_ambient_occlusion, maximum_ambient_occlusion);

    /*
	*	Calculate the weight between the current frame and the history depending on certain criteria.
	*
	*	1. Is the previous screen coordinate outside the screen? If so, it's not valid.
	*/
	float previous_sample_weight = 1.0f;

	previous_sample_weight *= float(ValidScreenCoordinate(previous_screen_coordinate));

    //Apply the feedback factor.
    previous_sample_weight *= 0.9f;

    //Blend the previous and the current ambient occlusion.
    float blended_ambient_occlusion = mix(current_ambient_occlusion, previous_ambient_occlusion, previous_sample_weight);

    //Output the fragments.
    OutputFragment(CurrentTemporalBuffer, vec4(blended_ambient_occlusion));
    OutputFragment(OutputAmbientOcclusion, vec4(blended_ambient_occlusion));
}