//Declare unifom buffer includes.
IncludeUniformBuffer(Camera);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(Camera);

//Declare output depth buffer.
OutputDepthBuffer(SceneDepthBuffer);

//Declare output render targets.
OutputRenderTarget(SceneFeatures1);
OutputRenderTarget(SceneFeatures2);
OutputRenderTarget(SceneFeatures3);
OutputRenderTarget(SceneFeatures4);
OutputRenderTarget(Scene);

//Declare render resolution.
RenderResolution(MAIN_FULL);

//Set the cull mode.
CullMode(BACK);

//Set the load/store operators.
ColorLoadOperator(LOAD);
ColorStoreOperator(STORE);
DepthStencilLoadOperator(LOAD);
DepthStencilStoreOperator(STORE);

//Set depth/stencil properties.
DepthCompareOperator(EQUAL);
DepthTestEnable();

//Set the topology.
Topology(TRIANGLE_FAN);

//Declare push constant data.
PushConstantData(vec3, WORLD_GRID_DELTA);
PushConstantData(float, HALF_WIDTH);
PushConstantData(float, WHOLE_WIDTH);
PushConstantData(float, HEIGHT);
PushConstantData(uint, MATERIAL_INDEX);
PushConstantData(float, START_FADE_IN_DISTANCE);
PushConstantData(float, END_FADE_IN_DISTANCE);
PushConstantData(float, START_FADE_OUT_DISTANCE);
PushConstantData(float, END_FADE_OUT_DISTANCE);

//Declare samplers.
Sampler(SAMPLER /* Name */, LINEAR /* Magnification Filter */, LINEAR /* Mipmap Mode */, REPEAT /* Address Mode */, 8 /* Anisotropic Samples */);

//Subscribe to input streams.
SubscribeToInputStream(InstancedImpostor);

//The vertex shader.
Vertex
{
    //Declare input parameters.
    InputParameter(vec3, InPosition);

    //Declare output parameters.
    OutputParameter(mat3, OutTangentSpaceMatrix);
    OutputParameter(vec3, OutWorldPosition);
    OutputParameter(vec2, OutTextureCoordinate);

    //Calculate X and Y components.
	float x = float(VERTEX_INDEX == 1 || VERTEX_INDEX == 2);
    float y = float(VERTEX_INDEX == 2 || VERTEX_INDEX == 3);

    //Calculate the world position.
    OutWorldPosition = InPosition + WORLD_GRID_DELTA;

    //Calculate the forward vector.
    vec3 forward_vector = CAMERA_WORLD_POSITION - OutWorldPosition;

	//Calculate the distance to camera and normalize the forward vector.
    forward_vector.y = 0.0f;
    float distance_to_camera = length(forward_vector);
    float distance_to_camera_reciprocal = 1.0f / distance_to_camera;
    forward_vector *= distance_to_camera_reciprocal;

    //Calculate the right vector.
    vec3 right_vector = cross(forward_vector, vec3(0.0f, 1.0f, 0.0f));

    //Modify the world position.
    OutWorldPosition += (right_vector * HALF_WIDTH + -right_vector * WHOLE_WIDTH * x);
    OutWorldPosition.y += HEIGHT * y;

    //Calculate the tangent space matrix.
    OutTangentSpaceMatrix = mat3(right_vector, vec3(0.0f, 1.0f, 0.0f), forward_vector);

    //Calculate the texture coordinate.
    OutTextureCoordinate.x = x;
    OutTextureCoordinate.y = 1.0f - y;

    //Output the position.
    OutputVertexPosition(WORLD_TO_CLIP_MATRIX * vec4(OutWorldPosition, 1.0f));
}

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(mat3, InTangentSpaceMatrix);
    InputParameter(vec3, InWorldPosition);
    InputParameter(vec2, InTextureCoordinate);

    //Evaluate the material.
    vec4 albedo_thickness;
    EVALUATE_ALBEDO_THICKNESS(MATERIALS[MATERIAL_INDEX], InTextureCoordinate, SAMPLER, albedo_thickness);
    vec4 normal_map_displacement;
    EVALUATE_NORMAL_MAP_DISPLACEMENT(MATERIALS[MATERIAL_INDEX], InTextureCoordinate, SAMPLER, normal_map_displacement);
    vec4 material_properties;
    EVALUATE_MATERIAL_PROPERTIES(MATERIALS[MATERIAL_INDEX], InTextureCoordinate, SAMPLER, material_properties);

    //Calculate the shading normal.
    vec3 shading_normal = normal_map_displacement.xyz * 2.0f - 1.0f;
    shading_normal = InTangentSpaceMatrix * shading_normal;
    shading_normal = normalize(shading_normal);

    //Calculate the velocity.
    vec2 velocity = CalculateCurrentScreenCoordinate(InWorldPosition) - CalculatePreviousScreenCoordinate(InWorldPosition) - CURRENT_FRAME_JITTER;

    //Output the fragments.
    OutputFragment(SceneFeatures1, albedo_thickness);
    OutputFragment(SceneFeatures2, vec4(shading_normal, gl_FragCoord.z));
    OutputFragment(SceneFeatures3, material_properties);
    OutputFragment(SceneFeatures4, vec4(velocity, 0.0f, 0.0f));
    OutputFragment(Scene, vec4(albedo_thickness.rgb * material_properties[3] * MATERIALS[MATERIAL_INDEX]._EmissiveMultiplier, 1.0f));
}