//Declare uniform buffer includes.
IncludeUniformBuffer(Camera);
IncludeUniformBuffer(General);
IncludeUniformBuffer(HammersleyHemisphereSamples);
IncludeUniformBuffer(Irradiance);
IncludeUniformBuffer(World);

//Declare storage buffer includes.
IncludeStorageBuffer(Lighting);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(BlueNoise);
IncludeShaderFunctionLibrary(Camera);
IncludeShaderFunctionLibrary(Lighting);
IncludeShaderFunctionLibrary(Math);
IncludeShaderFunctionLibrary(PhysicallyBasedLighting);
IncludeShaderFunctionLibrary(World);

//Declare compute render targets.
ComputeRenderTarget(SceneFeatures2, RGBA_FLOAT32);
ComputeRenderTarget(SceneFeatures3, RGBA_FLOAT32);
ComputeRenderTarget(SpecularIrradiance, RGBA_FLOAT32);

//Declare samplers.
Sampler(SAMPLER /* Name */, LINEAR /* Magnification Filter */, LINEAR /* Mipmap Mode */, REPEAT /* Address Mode */, 8 /* Anisotropic Samples */);

//Subscribe to input streams.
SubscribeToInputStream(RayTracingViewportFull);

//The ray generation shader.
RayGeneration
{
    //Declare payloads.
    Payload(0, vec3, RADIANCE);

    //Constants.
    #define NUMBER_OF_SAMPLES (1)

    //Calculate the screen coordinate.
    vec2 screen_coordinate = (vec2(RAY_TRACING_ID.xy) + vec2(0.5f)) / vec2(RAY_TRACING_SIZE.xy);

    //Sample the scene features.
    vec4 scene_features_2 = ImageLoad(SceneFeatures2, ivec2(RAY_TRACING_ID.xy));
    vec4 scene_features_3 = ImageLoad(SceneFeatures3, ivec2(RAY_TRACING_ID.xy));

    //Cache properties.
    vec3 normal = scene_features_2.xyz;
    float depth = scene_features_2.w;
    float roughness = scene_features_3.x;

    //Calculate the world position.
    vec3 world_position = CalculateWorldPosition(screen_coordinate, depth);

    //Calculate the view direction.
    vec3 view_direction = normalize(world_position - CAMERA_WORLD_POSITION);

    //Accumulate the radiance over a number of samples.
    vec3 accumulated_radiance = vec3(0.0f);

    for (uint i = 0; i < NUMBER_OF_SAMPLES; ++i)
    {
        //Generate the ray direction.
        vec3 ray_direction;

        //Sample the noise texture.
        vec4 noise_texture_sample = SampleBlueNoiseTexture(uvec2(RAY_TRACING_ID.xy), i);

        //Initialize the random rotation.
        mat3 random_rotation = CalculateGramSchmidtRotationMatrix(normal, noise_texture_sample.xyz * 2.0f - 1.0f);

        //Calculate the random hemisphere sample index.
        uint random_hemisphere_sample_index = uint(noise_texture_sample.w * 64.0f) & 63;

        //Retrieve the random hemisphere sample.
        vec3 random_hemisphere_direction = IRRADIANCE_HEMISPHERE_SAMPLES[random_hemisphere_sample_index].xyz;
    
        //Rotate the random direction.
        ray_direction = random_rotation * random_hemisphere_direction;

        //Flip the direction, if needed.
        ray_direction = dot(ray_direction, normal) >= 0.0f ? ray_direction : -ray_direction;

        //Lil' trick to make cosine-weighted directions.
        ray_direction = normalize(normal + ray_direction);

        //Calculate the specular direction.
        vec3 specular_direction = reflect(view_direction, normal);

        //Blend the diffuse direction and the specular direction.
        ray_direction = normalize(mix(specular_direction, ray_direction, roughness));

        //Trace the ray!
        TraceRay(0, 0, world_position + normal * FLOAT32_EPSILON * 4096.0f, ray_direction, FLOAT32_MAXIMUM, 0);

        //Accumulate radiance.
        accumulated_radiance += RADIANCE;
    }

    //Store the shadows.
    ImageStore(SpecularIrradiance, ivec2(RAY_TRACING_ID.xy), vec4(accumulated_radiance / NUMBER_OF_SAMPLES, 1.0f));
}

//The ray miss shader.
RayMiss
{
    //Declare payloads.
    Payload(0, vec3, RADIANCE);

    //Set the radiance.
    RADIANCE = SampleSky(WORLD_RAY_DIRECTION, MAXIMUM_SKY_TEXTURE_MIP_LEVEL);
}

//The ray miss shader.
RayMiss
{
    //Declare payloads.
    Payload(1, float, VISIBILITY);

    //Set the visibility.
    VISIBILITY = 1.0f;
}

//Declare a new hit group.
HitGroup(OpaqueModels);

//The ray closest hit shader.
IncludeCommonRayClosestHitShader(ModelRayClosestHit);

//Declare a new hit group.
HitGroup(MaskedModels);

//The ray closest hit shader.
IncludeCommonRayClosestHitShader(ModelRayClosestHit);

//The ray any hit shader.
RayAnyHit
{
    //Retrieve the hit vertex information.
    HitVertexInformation hit_vertex_information = GetHitVertexInformation();

    //Retrieve the hit material index.
    uint hit_material_index = GetHitMaterialIndex();

    //Evaluate the opacity.
    float opacity;
    EVALUATE_OPACITY(MATERIALS[hit_material_index], hit_vertex_information._TextureCoordinate, SAMPLER, opacity);

    //Check if this hit should be ignored.
    if (opacity < 0.5f)
    {
        IgnoreHit();
    }
}