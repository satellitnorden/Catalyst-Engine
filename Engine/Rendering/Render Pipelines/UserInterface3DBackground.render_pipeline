//Declare unifom buffer includes.
IncludeUniformBuffer(Camera);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(Camera);

//Declare output depth buffer.
OutputDepthBuffer(SceneDepthBuffer);

//Declare output render targets.
OutputRenderTarget(SceneFeatures1);
OutputRenderTarget(SceneFeatures2);
OutputRenderTarget(SceneFeatures3);
OutputRenderTarget(SceneFeatures4);

//Declare render resolution.
RenderResolution(MAIN_FULL);

//Set the load/store operators.
ColorLoadOperator(LOAD);
ColorStoreOperator(STORE);
DepthStencilLoadOperator(LOAD);
DepthStencilStoreOperator(STORE);

//Set the cull mode.
CullMode(NONE);

//Set depth/stencil properties.
DepthCompareOperator(GREATER);
DepthTestEnable();
DepthWriteEnable();
StencilTestEnable();
StencilFailOperator(KEEP);
StencilPassOperator(REPLACE);
StencilDepthFailOperator(KEEP);
StencilCompareOperator(ALWAYS);
StencilCompareMask(0);
StencilWriteMask(1);
StencilReferenceMask(1);

//Set the topology.
Topology(TRIANGLE_STRIP);

//Declare push constant data.
PushConstantData(mat4, TRANSFORMATION);

//Subscribe to input streams.
SubscribeToInputStream(UserInterface3DBackground);

//The vertex shader.
Vertex
{
    //Declare output parameters.
    OutputParameter(vec3, OutWorldPosition);
    OutputParameter(vec3, OutNormal);

    //Calculate the world position.
    float X = float(VERTEX_INDEX / 2);
    float Y = float(VERTEX_INDEX & 1);

    X -= 0.5f;
    Y -= 0.5f;

    OutWorldPosition = vec3(TRANSFORMATION * vec4(X, Y, 0.0f, 1.0f));

    //Calculate the normal.
    OutNormal = vec3(TRANSFORMATION * vec4(0.0f, 0.0f, -1.0f, 0.0f));

    //Output the position.
    OutputVertexPosition(WORLD_TO_CLIP_MATRIX * vec4(OutWorldPosition, 1.0f));
}

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec3, InWorldPosition);
    InputParameter(vec3, InNormal);

    //Flip the normal, if necessary.
    vec3 normal = FRAGMENT_FRONT_FACING ? InNormal : -InNormal;

    //Calculate the velocity.
    vec2 velocity = CalculateCurrentScreenCoordinate(InWorldPosition) - CalculatePreviousScreenCoordinate(InWorldPosition) - CURRENT_FRAME_JITTER;

    //Output the fragments.
    OutputFragment(SceneFeatures1, vec4(0.0f, 0.0f, 0.0f, 1.0f));
    OutputFragment(SceneFeatures2, vec4(normal, gl_FragCoord.z));
    OutputFragment(SceneFeatures3, vec4(0.0f, 0.0f, 1.0f, 0.0f));
    OutputFragment(SceneFeatures4, vec4(velocity, 0.0f, 0.0f));
}