//Declare unifom buffer includes.
IncludeUniformBuffer(General);

//Declare input render targets.
InputRenderTarget(SceneFeatures1 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneFeatures2 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneFeatures3 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneFeatures4 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);

//Declare output render targets.
OutputRenderTarget(SceneFeatures1Half);
OutputRenderTarget(SceneFeatures2Half);
OutputRenderTarget(SceneFeatures3Half);
OutputRenderTarget(SceneFeatures4Half);

//Declare render resolution.
RenderResolution(MAIN_HALF);

//Set the load/store operators.
ColorStoreOperator(STORE);

//Set the topology.
Topology(TRIANGLE_FAN);

//Subscribe to input streams.
SubscribeToInputStream(Viewport);

//The vertex shader.
IncludeCommonVertexShader(ViewportScreenCoordinate);

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec2, InScreenCoordinate);

    //Calculate the texel offset.
	vec2 texel_offset = vec2(INVERSE_FULL_MAIN_RESOLUTION.x * 0.5f, INVERSE_FULL_MAIN_RESOLUTION.y * 0.5f);

	//Compare the depths in the scene features 2 texture. Choose the texel for the downsample with the depth closest to the camera.
	vec4 scene_features_2_sample_1 = texture(SceneFeatures2, InScreenCoordinate + vec2(-texel_offset.x, -texel_offset.y));
	vec4 scene_features_2_sample_2 = texture(SceneFeatures2, InScreenCoordinate + vec2(-texel_offset.x, texel_offset.y));
	vec4 scene_features_2_sample_3 = texture(SceneFeatures2, InScreenCoordinate + vec2(texel_offset.x, -texel_offset.y));
	vec4 scene_features_2_sample_4 = texture(SceneFeatures2, InScreenCoordinate + vec2(texel_offset.x, texel_offset.y));

    //Write the fragments.
    if (scene_features_2_sample_1.w > scene_features_2_sample_2.w
    	&& scene_features_2_sample_1.w > scene_features_2_sample_3.w
    	&& scene_features_2_sample_1.w > scene_features_2_sample_4.w)
    {
        OutputFragment(SceneFeatures1Half, texture(SceneFeatures1, InScreenCoordinate + vec2(-texel_offset.x, -texel_offset.y)));
    	OutputFragment(SceneFeatures2Half, scene_features_2_sample_1);
        OutputFragment(SceneFeatures3Half, texture(SceneFeatures3, InScreenCoordinate + vec2(-texel_offset.x, -texel_offset.y)));
        OutputFragment(SceneFeatures4Half, texture(SceneFeatures4, InScreenCoordinate + vec2(-texel_offset.x, -texel_offset.y)));
    }

    else if (	scene_features_2_sample_2.w > scene_features_2_sample_3.w
    			&& scene_features_2_sample_2.w > scene_features_2_sample_4.w)
    {
        OutputFragment(SceneFeatures1Half, texture(SceneFeatures1, InScreenCoordinate + vec2(-texel_offset.x, texel_offset.y)));
    	OutputFragment(SceneFeatures2Half, scene_features_2_sample_2);
        OutputFragment(SceneFeatures3Half, texture(SceneFeatures3, InScreenCoordinate + vec2(-texel_offset.x, texel_offset.y)));
        OutputFragment(SceneFeatures4Half, texture(SceneFeatures4, InScreenCoordinate + vec2(-texel_offset.x, texel_offset.y)));
    }

    else if (scene_features_2_sample_3.w > scene_features_2_sample_4.w)
    {
        OutputFragment(SceneFeatures1Half, texture(SceneFeatures1, InScreenCoordinate + vec2(texel_offset.x, -texel_offset.y)));
    	OutputFragment(SceneFeatures2Half, scene_features_2_sample_3);
        OutputFragment(SceneFeatures3Half, texture(SceneFeatures3, InScreenCoordinate + vec2(texel_offset.x, -texel_offset.y)));
        OutputFragment(SceneFeatures4Half, texture(SceneFeatures4, InScreenCoordinate + vec2(texel_offset.x, -texel_offset.y)));
    }

    else
    {
        OutputFragment(SceneFeatures1Half, texture(SceneFeatures1, InScreenCoordinate + vec2(texel_offset.x, texel_offset.y)));
    	OutputFragment(SceneFeatures2Half, scene_features_2_sample_4);
        OutputFragment(SceneFeatures3Half, texture(SceneFeatures3, InScreenCoordinate + vec2(texel_offset.x, texel_offset.y)));
        OutputFragment(SceneFeatures4Half, texture(SceneFeatures4, InScreenCoordinate + vec2(texel_offset.x, texel_offset.y)));
    }
}