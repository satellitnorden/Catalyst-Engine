//Declare unifom buffer includes.
IncludeUniformBuffer(Camera);
IncludeUniformBuffer(General);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(Noise);

//Declare output depth buffer.
OutputDepthBuffer(SceneDepthBuffer);

//Declare render resolution.
RenderResolution(MAIN_FULL);

//Set the cull mode.
CullMode(BACK);

//Set the load/store operators.
DepthStencilLoadOperator(LOAD);
DepthStencilStoreOperator(STORE);

//Set depth/stencil properties.
DepthCompareOperator(GREATER);
DepthTestEnable();
DepthWriteEnable();
StencilTestEnable();
StencilFailOperator(KEEP);
StencilPassOperator(REPLACE);
StencilDepthFailOperator(KEEP);
StencilCompareOperator(ALWAYS);
StencilCompareMask(0);
StencilWriteMask(1);
StencilReferenceMask(1);

//Set the topology.
Topology(TRIANGLE_FAN);

//Declare push constant data.
PushConstantData(vec3, WORLD_GRID_DELTA);
PushConstantData(float, HALF_WIDTH);
PushConstantData(float, WHOLE_WIDTH);
PushConstantData(float, HEIGHT);
PushConstantData(uint, MATERIAL_INDEX);
PushConstantData(float, START_FADE_IN_DISTANCE);
PushConstantData(float, END_FADE_IN_DISTANCE);
PushConstantData(float, START_FADE_OUT_DISTANCE);
PushConstantData(float, END_FADE_OUT_DISTANCE);

//Declare samplers.
Sampler(SAMPLER /* Name */, LINEAR /* Magnification Filter */, LINEAR /* Mipmap Mode */, REPEAT /* Address Mode */, 8 /* Anisotropic Samples */);

//Subscribe to input streams.
SubscribeToInputStream(InstancedImpostor);

//The vertex shader.
Vertex
{
    //Declare input parameters.
    InputParameter(vec3, InPosition);

    //Declare output parameters.
    OutputParameter(vec2, OutTextureCoordinate);
    OutputParameter(float, OutFadeOpacity);

    //Calculate X and Y components.
	float x = float(VERTEX_INDEX == 1 || VERTEX_INDEX == 2);
    float y = float(VERTEX_INDEX == 2 || VERTEX_INDEX == 3);

    //Calculate the world position.
    vec3 world_position = InPosition + WORLD_GRID_DELTA;

    //Calculate the forward vector.
    vec3 forward_vector = CAMERA_WORLD_POSITION - world_position;

	//Calculate the distance to canera and normalize the forward vector.
    forward_vector.y = 0.0f;
    float distance_to_camera = length(forward_vector);
    float distance_to_camera_reciprocal = 1.0f / distance_to_camera;
    forward_vector *= distance_to_camera_reciprocal;

    //Calculate the right vector.
    vec3 right_vector = cross(forward_vector, vec3(0.0f, 1.0f, 0.0f));

    //Modify the world position.
    world_position += (right_vector * HALF_WIDTH + -right_vector * WHOLE_WIDTH * x);
    world_position.y += HEIGHT * y;

    //Calculate the texture coordinate.
    OutTextureCoordinate.x = x;
    OutTextureCoordinate.y = 1.0f - y;

    //Calculate the fade opacity.
    float fade_in_range = END_FADE_IN_DISTANCE - START_FADE_IN_DISTANCE;
    float fade_in = clamp(distance_to_camera - START_FADE_IN_DISTANCE, 0.0f, fade_in_range) / fade_in_range;
    float fade_out_range = END_FADE_OUT_DISTANCE - START_FADE_OUT_DISTANCE;
    float fade_out = 1.0f - (clamp(distance_to_camera - START_FADE_OUT_DISTANCE, 0.0f, fade_out_range) / fade_out_range);

    OutFadeOpacity = min(fade_in, fade_out);

    //Output the position.
    OutputVertexPosition(WORLD_TO_CLIP_MATRIX * vec4(world_position, 1.0f));
}

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec2, InTextureCoordinate);
    InputParameter(float, InFadeOpacity);

    //Evaluate the opacity.
    float opacity = 1.0f;

    if (TEST_BIT(MATERIALS[MATERIAL_INDEX]._Properties, MATERIAL_PROPERTY_TYPE_MASKED))
    {
        EVALUATE_OPACITY(MATERIALS[MATERIAL_INDEX], InTextureCoordinate, SAMPLER, opacity);
    }

    /*
    *   As impostors might be used to fade between impostors and real models,
    *   use the inverse of the noise value for a smoother fade between them.
    */
    float noise_value = 1.0f - InterleavedGradientNoise(uvec2(FRAGMENT_COORDINATE.xy), FRAME);

    //Conditionally discard.
    if (opacity < 0.5f
    || (InFadeOpacity < 1.0f && InFadeOpacity < noise_value))
    {
        discard;
    }
}