//Declare uniform buffer includes.
IncludeUniformBuffer(Camera);
IncludeUniformBuffer(General);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(Camera);
IncludeShaderFunctionLibrary(Noise);
IncludeShaderFunctionLibrary(VolumetricLighting);

//Declare input render targets.
InputRenderTarget(VolumetricLighting /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneFeatures2 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneFeatures2Half /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);

//Declare output render targets.
OutputRenderTarget(Scene);

//Declare render resolution.
RenderResolution(MAIN_FULL);

//Set the load/store operators.
ColorLoadOperator(LOAD);
ColorStoreOperator(STORE);

//Set the topology.
Topology(TRIANGLE_FAN);

//Set blend properties.
BlendEnable();
BlendColorSourceFactor(ONE);
BlendColorDestinationFactor(SOURCE_ALPHA);
BlendColorOperator(ADD);
BlendAlphaSourceFactor(ONE);
BlendAlphaDestinationFactor(ZERO);
BlendAlphaOperator(ADD);

//Subscribe to input streams.
SubscribeToInputStream(Viewport);

//The vertex shader.
IncludeCommonVertexShader(ViewportScreenCoordinate);

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec2, InScreenCoordinate);

    //Load the scene features.
    vec4 scene_features_2 = texture(SceneFeatures2, InScreenCoordinate);

    //Cache the depth of the current pixel.
    float depth = scene_features_2.w;

    //Calculate the linearized depth.
    float linearized_depth = LinearizeDepth(depth);

    //Retrieve the volumetric lighting.
    vec3 volumetric_lighting;

    {
        vec2 sample_coordinate_1 = InScreenCoordinate;
        vec2 sample_coordinate_2 = InScreenCoordinate + vec2(0.0f, 1.0f) * INVERSE_HALF_MAIN_RESOLUTION;
        vec2 sample_coordinate_3 = InScreenCoordinate + vec2(1.0f, 0.0f) * INVERSE_HALF_MAIN_RESOLUTION;
        vec2 sample_coordinate_4 = InScreenCoordinate + vec2(1.0f, 1.0f) * INVERSE_HALF_MAIN_RESOLUTION;
        
        vec3 volumetric_lighting_1 = texture(VolumetricLighting, sample_coordinate_1).rgb;
        vec3 volumetric_lighting_2 = texture(VolumetricLighting, sample_coordinate_2).rgb;
        vec3 volumetric_lighting_3 = texture(VolumetricLighting, sample_coordinate_3).rgb;
        vec3 volumetric_lighting_4 = texture(VolumetricLighting, sample_coordinate_4).rgb;
        
        float linearized_depth_1 = LinearizeDepth(texture(SceneFeatures2Half, sample_coordinate_1).w);
        float linearized_depth_2 = LinearizeDepth(texture(SceneFeatures2Half, sample_coordinate_2).w);
        float linearized_depth_3 = LinearizeDepth(texture(SceneFeatures2Half, sample_coordinate_3).w);
        float linearized_depth_4 = LinearizeDepth(texture(SceneFeatures2Half, sample_coordinate_4).w);

        float horizontal_weight = fract(InScreenCoordinate.x * HALF_MAIN_RESOLUTION.x);
        float vertical_weight = fract(InScreenCoordinate.y * HALF_MAIN_RESOLUTION.y);

        float weight_1 = (1.0f - horizontal_weight) * (1.0f - vertical_weight);
	    float weight_2 = (1.0f - horizontal_weight) * vertical_weight;
	    float weight_3 = horizontal_weight * (1.0f - vertical_weight);
	    float weight_4 = horizontal_weight * vertical_weight;

        weight_1 = max(weight_1 * exp(-abs(depth - linearized_depth_1)), FLOAT32_EPSILON);
        weight_2 = max(weight_2 * exp(-abs(depth - linearized_depth_2)), FLOAT32_EPSILON);
        weight_3 = max(weight_3 * exp(-abs(depth - linearized_depth_3)), FLOAT32_EPSILON);
        weight_4 = max(weight_4 * exp(-abs(depth - linearized_depth_4)), FLOAT32_EPSILON);

        float total_weight_reciprocal = 1.0f / (weight_1 + weight_2 + weight_3 + weight_4);

	    weight_1 *= total_weight_reciprocal;
	    weight_2 *= total_weight_reciprocal;
	    weight_3 *= total_weight_reciprocal;
        weight_4 *= total_weight_reciprocal;

        volumetric_lighting =   volumetric_lighting_1 * weight_1
                                + volumetric_lighting_2 * weight_2
                                + volumetric_lighting_3 * weight_3
                                + volumetric_lighting_4 * weight_4;
    }

    //Add some noise to the volumetric lighting so that the temporal anti aliasing pass has an easier time cleaning it up.
    //volumetric_lighting *= mix(0.875f, 1.125f, InterleavedGradientNoise(uvec2(FRAGMENT_COORDINATE.xy), FRAME));

    //Calculate the world position.
    vec3 world_position = CalculateWorldPosition(InScreenCoordinate, depth);

    //Calculate the hit distance.
    float hit_distance = length(world_position - CAMERA_WORLD_POSITION);

    //Calculate the transmittance.
    float transmittance = 1.0f;

    for (uint i = 0; i < 4; ++i)
    {
        vec3 sample_position = mix(CAMERA_WORLD_POSITION, world_position, float(i) / 4);
        float extinction = GetExtinctionAtPosition(sample_position);
        float attenuation_factor = exp(-extinction * hit_distance * 0.25f);
        transmittance *= attenuation_factor;
    }

    //Output the fragment.
    OutputFragment(Scene, vec4(volumetric_lighting, 1.0f));
}