//Declare uniform buffer includes.
IncludeUniformBuffer(Camera);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(Camera);
IncludeShaderFunctionLibrary(VolumetricLighting);

//Declare input render targets.
InputRenderTarget(SceneFeatures2 /* Identifier */, Nearest /* Magnification Filter */, Nearest /* Mipmap Mode */, ClampToEdge /* Address Mode */);
InputRenderTarget(VolumetricLighting /* Identifier */, Linear /* Magnification Filter */, Nearest /* Mipmap Mode */, ClampToEdge /* Address Mode */);

//Declare output render targets.
OutputRenderTarget(Scene);

//Declare render resolution.
RenderResolution(MAIN_FULL);

//Set the load/store operators.
ColorLoadOperator(LOAD);
ColorStoreOperator(STORE);

//Set blend properties.
BlendEnable();
BlendColorSourceFactor(SOURCE_ALPHA);
BlendColorDestinationFactor(ONE_MINUS_SOURCE_ALPHA);
BlendColorOperator(ADD);
BlendAlphaSourceFactor(ONE);
BlendAlphaDestinationFactor(ZERO);
BlendAlphaOperator(ADD);

//Set the topology.
Topology(TRIANGLE_FAN);

//Subscribe to input streams.
SubscribeToInputStream(Viewport);

//The vertex shader.
Vertex
{
    //Declare output parameters.
    OutputParameter(vec2, OutTextureCoordinate);

	//Calculate the viewport coordinates.
	float x = -1.0f + float((VERTEX_INDEX & 2) << 1);
    float y = -1.0f + float((VERTEX_INDEX & 1) << 2);

    //Calculate the texture coordinate.
    OutTextureCoordinate.x = (x + 1.0f) * 0.5f;
    OutTextureCoordinate.y = (y + 1.0f) * 0.5f;
    
    //Output the position.
    OutputVertexPosition(vec4(x, y, 0.0f, 1.0f));
}

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec2, InTextureCoordinate);

    //Constants.
    #define NUMBER_OF_SAMPLES (16)

    //Retrieve the depth.
    float depth = texture(SceneFeatures2, InTextureCoordinate).w;

    //Calculate the world position.
    vec3 world_position = CalculateWorldPosition(InTextureCoordinate, depth);

    //Calculate the hit distance.
    float hit_distance = length(world_position - CAMERA_WORLD_POSITION);
    float hit_distance_reciprocal = 1.0f / hit_distance;

    //Calculate the direction.
    vec3 direction = (world_position - CAMERA_WORLD_POSITION) * hit_distance_reciprocal;

    //Calculate the transmittance.
    float transmittance = 1.0f;
    float sample_alpha = 0.0f;

    for (uint sample_index = 0; sample_index < NUMBER_OF_SAMPLES; ++sample_index)
    {
        //Calculate the current sample position and hit distance.
        float previous_sample_alpha = sample_alpha;
        sample_alpha = Square(float(sample_index + 1) / float(NUMBER_OF_SAMPLES));
        vec3 sample_position = mix(CAMERA_WORLD_POSITION, world_position, sample_alpha);
        float sample_hit_distance = max(hit_distance * sample_alpha - hit_distance * previous_sample_alpha, FLOAT32_EPSILON);

        //Cache the extinction.
        float extinction = GetExtinctionAtPosition(sample_position);

        //Calculate the attenuation factor.
        float attenuation_factor = exp(-extinction * sample_hit_distance);

        //Update the transmittance.
        transmittance *= attenuation_factor;
    }

    //Sample the volumetric lighting.
    vec4 volumetric_lighting = texture(VolumetricLighting, InTextureCoordinate);

    //Write the fragment.
    OutputFragment(Scene, vec4(volumetric_lighting.rgb, 1.0f - transmittance));
}