//Declare uniform buffer includes.
IncludeUniformBuffer(Camera);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(Camera);
IncludeShaderFunctionLibrary(VolumetricLighting);

//Declare input render targets.
InputRenderTarget(SceneFeatures2 /* Identifier */, Nearest /* Magnification Filter */, Nearest /* Mipmap Mode */, ClampToEdge /* Address Mode */);
InputRenderTarget(VolumetricLighting /* Identifier */, Linear /* Magnification Filter */, Nearest /* Mipmap Mode */, ClampToEdge /* Address Mode */);

//Declare output render targets.
OutputRenderTarget(Scene);

//Declare render resolution.
RenderResolution(MAIN_FULL);

//Set the load/store operators.
ColorLoadOperator(LOAD);
ColorStoreOperator(STORE);

//Set blend properties.
BlendEnable();
BlendColorSourceFactor(SOURCE_ALPHA);
BlendColorDestinationFactor(ONE_MINUS_SOURCE_ALPHA);
BlendColorOperator(ADD);
BlendAlphaSourceFactor(ONE);
BlendAlphaDestinationFactor(ZERO);
BlendAlphaOperator(ADD);

//Set the topology.
Topology(TRIANGLE_FAN);

//Subscribe to input streams.
SubscribeToInputStream(Viewport);

//The vertex shader.
IncludeCommonVertexShader(ViewportScreenCoordinate);

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec2, InTextureCoordinate);

    //Constants.
    #define NUMBER_OF_SAMPLES (16)

    //Retrieve the depth.
    float depth = texture(SceneFeatures2, InTextureCoordinate).w;

    //Calculate the world position.
    vec3 world_position = CalculateWorldPosition(InTextureCoordinate, depth);

    //Calculate the hit distance.
    float hit_distance = length(world_position - CAMERA_WORLD_POSITION);
    float hit_distance_reciprocal = 1.0f / hit_distance;

    //Calculate the opacity.
    float opacity = 1.0f - exp(-GetExtinctionAtPosition(CAMERA_WORLD_POSITION) * hit_distance);

    //Sample the volumetric lighting.
    vec4 volumetric_lighting = texture(VolumetricLighting, InTextureCoordinate);

    //Write the fragment.
    OutputFragment(Scene, vec4(volumetric_lighting.rgb, opacity));
}