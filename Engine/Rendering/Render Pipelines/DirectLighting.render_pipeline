//Declare uniform buffer includes.
IncludeUniformBuffer(Camera);
IncludeUniformBuffer(General);
IncludeUniformBuffer(RenderingConfiguration);
IncludeUniformBuffer(World);

//Declare storage buffer includes.
IncludeStorageBuffer(Lighting);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(Camera);
IncludeShaderFunctionLibrary(Lighting);
IncludeShaderFunctionLibrary(Noise);
IncludeShaderFunctionLibrary(PhysicallyBasedLighting);
IncludeShaderFunctionLibrary(RenderingConfiguration);

//Declare input render targets.
InputRenderTarget(SceneFeatures1 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneFeatures2 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneFeatures3 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneFeatures2Half /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(INTERMEDIATE_RGBA_FLOAT32_HALF_1 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);

//Declare output depth buffer.
OutputDepthBuffer(SceneDepthBuffer);

//Declare output render targets.
OutputRenderTarget(Scene);

//Declare render resolution.
RenderResolution(MAIN_FULL);

//Set the load/store operators.
DepthStencilLoadOperator(LOAD);
DepthStencilStoreOperator(STORE);
ColorLoadOperator(LOAD);
ColorStoreOperator(STORE);

//Set depth/stencil properties.
StencilTestEnable();
StencilFailOperator(KEEP);
StencilPassOperator(KEEP);
StencilDepthFailOperator(KEEP);
StencilCompareOperator(EQUAL);
StencilCompareMask(1);
StencilWriteMask(0);
StencilReferenceMask(1);

//Set the topology.
Topology(TRIANGLE_FAN);

//Set blend properties.
BlendEnable();
BlendColorSourceFactor(ONE);
BlendColorDestinationFactor(ONE);
BlendColorOperator(ADD);
BlendAlphaSourceFactor(ONE);
BlendAlphaDestinationFactor(ZERO);
BlendAlphaOperator(ADD);

//Subscribe to input streams.
SubscribeToInputStream(Viewport);

//The vertex shader.
IncludeCommonVertexShader(ViewportScreenCoordinate);

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec2, InScreenCoordinate);

    //Sample the scene features.
    vec4 scene_features_1 = texture(SceneFeatures1, InScreenCoordinate);
    vec4 scene_features_2 = texture(SceneFeatures2, InScreenCoordinate);
    vec4 scene_features_3 = texture(SceneFeatures3, InScreenCoordinate);

    vec3 albedo = scene_features_1.rgb;
    float thickness = scene_features_1.w;
    vec3 normal = scene_features_2.xyz;
    float depth = scene_features_2.w;
    float roughness = scene_features_3.x;
    float metallic = scene_features_3.y;
    float ambient_occlusion = scene_features_3.z;
    float emissive = scene_features_3.w;

    //Calculate the world position.
    vec3 world_position = CalculateWorldPosition(InScreenCoordinate, depth);

    //Calculate the view direction.
    vec3 view_direction = normalize(CAMERA_WORLD_POSITION - world_position);

    //Calculate the linearized depth.
    float linearized_depth = LinearizeDepth(depth);

    //Retrieve the shadows.
    vec4 shadows;

    if (SURFACE_SHADOWS_MODE != SURFACE_SHADOWS_MODE_NONE)
    {
#if 0
        shadows = texture(INTERMEDIATE_RGBA_FLOAT32_HALF_1, InScreenCoordinate);
#else
        vec2 sample_coordinate_1 = InScreenCoordinate;
        vec2 sample_coordinate_2 = InScreenCoordinate + vec2(0.0f, 1.0f) * INVERSE_HALF_MAIN_RESOLUTION;
        vec2 sample_coordinate_3 = InScreenCoordinate + vec2(1.0f, 0.0f) * INVERSE_HALF_MAIN_RESOLUTION;
        vec2 sample_coordinate_4 = InScreenCoordinate + vec2(1.0f, 1.0f) * INVERSE_HALF_MAIN_RESOLUTION;
        
        vec4 shadows_1 = texture(INTERMEDIATE_RGBA_FLOAT32_HALF_1, sample_coordinate_1);
        vec4 shadows_2 = texture(INTERMEDIATE_RGBA_FLOAT32_HALF_1, sample_coordinate_2);
        vec4 shadows_3 = texture(INTERMEDIATE_RGBA_FLOAT32_HALF_1, sample_coordinate_3);
        vec4 shadows_4 = texture(INTERMEDIATE_RGBA_FLOAT32_HALF_1, sample_coordinate_4);
        
        float linearized_depth_1 = LinearizeDepth(texture(SceneFeatures2Half, sample_coordinate_1).w);
        float linearized_depth_2 = LinearizeDepth(texture(SceneFeatures2Half, sample_coordinate_2).w);
        float linearized_depth_3 = LinearizeDepth(texture(SceneFeatures2Half, sample_coordinate_3).w);
        float linearized_depth_4 = LinearizeDepth(texture(SceneFeatures2Half, sample_coordinate_4).w);

        float horizontal_weight = fract(InScreenCoordinate.x * HALF_MAIN_RESOLUTION.x);
        float vertical_weight = fract(InScreenCoordinate.y * HALF_MAIN_RESOLUTION.y);

        float weight_1 = (1.0f - horizontal_weight) * (1.0f - vertical_weight);
	    float weight_2 = (1.0f - horizontal_weight) * vertical_weight;
	    float weight_3 = horizontal_weight * (1.0f - vertical_weight);
	    float weight_4 = horizontal_weight * vertical_weight;

        weight_1 = max(weight_1 * exp(-abs(linearized_depth - linearized_depth_1)), FLOAT32_EPSILON * 1.0f);
        weight_2 = max(weight_2 * exp(-abs(linearized_depth - linearized_depth_2)), FLOAT32_EPSILON * 1.0f);
        weight_3 = max(weight_3 * exp(-abs(linearized_depth - linearized_depth_3)), FLOAT32_EPSILON * 1.0f);
        weight_4 = max(weight_4 * exp(-abs(linearized_depth - linearized_depth_4)), FLOAT32_EPSILON * 1.0f);

        float total_weight_reciprocal = 1.0f / (weight_1 + weight_2 + weight_3 + weight_4);

	    weight_1 *= total_weight_reciprocal;
	    weight_2 *= total_weight_reciprocal;
	    weight_3 *= total_weight_reciprocal;
        weight_4 *= total_weight_reciprocal;

        shadows =   shadows_1 * weight_1
                    + shadows_2 * weight_2
                    + shadows_3 * weight_3
                    + shadows_4 * weight_4;
#endif

        /*
        //If the shadows are a bit noisy, add some noise to them to help temporal anti aliasing.
        for (uint i = 0; i < 4; ++i)
        {
            float noise_weight = InverseSquare(1.0f - (abs(shadows[i] - 0.5f) * 2.0f));
            shadows[i] = mix(shadows[i], InterleavedGradientNoise(uvec2(FRAGMENT_COORDINATE.xy), FRAME), noise_weight);
        }
        */
    }

    else
    {
        shadows = vec4(1.0f, 1.0f, 1.0f, 1.0f);
    }

    //Calculate the lighting.
    vec3 lighting = vec3(0.0f);

    //Iterate over all lights.
    for (uint i = 0; i < LIGHTING_HEADER._NumberOfLights; ++i)
    {
        //Unpack the light.
	    Light light = UnpackLight(i);

        //Calculate the light radiance.
        vec3 light_radiance = light._Color * light._Intensity;

        switch (light._LightType)
        {
            case LIGHT_TYPE_DIRECTIONAL:
            {
                //Retrieve the shadow factor.
                float shadow_factor = shadows[0];

                //Add direct light.
                lighting += BidirectionalReflectanceDistribution
                (
                    view_direction,
                    albedo,
                    normal,
                    roughness,
                    metallic,
                    thickness,
                    light._TransformData1
                ) * light_radiance * shadow_factor * mix(0.125f, 1.0f, ambient_occlusion);

                break;
            }

            case LIGHT_TYPE_POINT:
            {
                //Calculate the distance from the light.
                float distance_from_light = length(world_position - light._TransformData1);

                //Calculate the direction from the light.
                vec3 direction_from_light = (world_position - light._TransformData1) * (1.0f / distance_from_light);

                //Calculate the attenuation.
                float attenuation = distance_from_light > 0.0f ? 1.0f / distance_from_light : 1.0f;

                //Add direct light.
                lighting += BidirectionalReflectanceDistribution
                (
                    view_direction,
                    albedo,
                    normal,
                    roughness,
                    metallic,
                    thickness,
                    direction_from_light
                ) * light_radiance * attenuation * mix(0.5f, 1.0f, ambient_occlusion);

                break;
            }
        }
    }

    //Output the fragment.
    OutputFragment(Scene, vec4(lighting, 1.0f));
}