//Declare uniform buffer includes.
IncludeUniformBuffer(Camera);
IncludeUniformBuffer(World);

//Declare storage buffer includes.
IncludeStorageBuffer(Lighting);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(Camera);
IncludeShaderFunctionLibrary(Lighting);
IncludeShaderFunctionLibrary(PhysicallyBasedLighting);

//Declare input render targets.
InputRenderTarget(SceneFeatures1 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneFeatures2 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneFeatures3 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(INTERMEDIATE_RGBA_FLOAT32_HALF_1 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);

//Declare output depth buffer.
OutputDepthBuffer(SceneDepthBuffer);

//Declare output render targets.
OutputRenderTarget(Scene);

//Declare render resolution.
RenderResolution(MAIN_FULL);

//Set the load/store operators.
DepthStencilLoadOperator(LOAD);
DepthStencilStoreOperator(STORE);
ColorLoadOperator(LOAD);
ColorStoreOperator(STORE);

//Set depth/stencil properties.
StencilTestEnable();
StencilFailOperator(KEEP);
StencilPassOperator(KEEP);
StencilDepthFailOperator(KEEP);
StencilCompareOperator(EQUAL);
StencilCompareMask(1);
StencilWriteMask(0);
StencilReferenceMask(1);

//Set the topology.
Topology(TRIANGLE_FAN);

//Subscribe to input streams.
SubscribeToInputStream(Viewport);

//The vertex shader.
IncludeCommonVertexShader(ViewportScreenCoordinate);

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec2, InScreenCoordinate);

    //Sample the scene features.
    vec4 scene_features_1 = texture(SceneFeatures1, InScreenCoordinate);
    vec4 scene_features_2 = texture(SceneFeatures2, InScreenCoordinate);
    vec4 scene_features_3 = texture(SceneFeatures3, InScreenCoordinate);

    vec3 albedo = scene_features_1.rgb;
    float thickness = scene_features_1.w;
    vec3 normal = scene_features_2.xyz;
    float depth = scene_features_2.w;
    float roughness = scene_features_3.x;
    float metallic = scene_features_3.y;
    float ambient_occlusion = scene_features_3.z;
    float emissive = scene_features_3.w;

    //Calculate the world position.
    vec3 world_position = CalculateWorldPosition(InScreenCoordinate, depth);

    //Calculate the view direction.
    vec3 view_direction = normalize(CAMERA_WORLD_POSITION - world_position);

    //Calculate the lighting.
    vec3 lighting = vec3(0.0f);

    //Iterate over all lights.
    for (uint i = 0; i < LIGHTING_HEADER._NumberOfLights; ++i)
    {
        //Unpack the light.
	    Light light = UnpackLight(i);

        //Calculate the light radiance.
        vec3 light_radiance = light._Color * light._Intensity;

        switch (light._LightType)
        {
            case LIGHT_TYPE_DIRECTIONAL:
            {
                //Retrieve the shadow factor.
                float shadow_factor = texture(INTERMEDIATE_RGBA_FLOAT32_HALF_1, InScreenCoordinate).x;

                //Add direct light.
                lighting += CalculateDirectLighting
                (
                    view_direction,
                    albedo,
                    normal,
                    roughness,
                    metallic,
                    ambient_occlusion,
                    thickness,
                    light._TransformData1,
                    light_radiance,
                    0
                ) * shadow_factor * ambient_occlusion;

                break;
            }
        }
    }

    //Output the fragment.
    OutputFragment(Scene, vec4(lighting, 1.0f));
}