//Declare output render targets.
OutputRenderTarget(SceneLowDynamicRange1);

//Declare render resolution.
RenderResolution(MAIN_FULL);

//Set the cull mode.
CullMode(NONE);

//Set the load/store operators.
ColorLoadOperator(LOAD);
ColorStoreOperator(STORE);

//Set the topology.
Topology(TRIANGLE_STRIP);

//Set blend properties.
BlendEnable();
BlendColorSourceFactor(SOURCE_ALPHA);
BlendColorDestinationFactor(ONE_MINUS_SOURCE_ALPHA);
BlendColorOperator(ADD);
BlendAlphaSourceFactor(ONE);
BlendAlphaDestinationFactor(ZERO);
BlendAlphaOperator(ADD);

//Declare push constant data.
PushConstantData(vec4, COLOR_OPACITY);
PushConstantData(vec2, BOUNDS_MINIMUM);
PushConstantData(vec2, BOUNDS_MAXIMUM);
PushConstantData(vec2, TEXTURE_MINIMUM);
PushConstantData(vec2, TEXTURE_MAXIMUM);
PushConstantData(uint, TEXTURE_INDEX);
PushConstantData(float, SMOOTHING_FACTOR);

//Declare samplers.
Sampler(SAMPLER /* Name */, LINEAR /* Magnification Filter */, LINEAR /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */, 0 /* Anisotropic Samples */);

//Subscribe to input streams.
SubscribeToInputStream(UserInterfaceText);

//The vertex shader.
Vertex
{
    //Declare output parameters.
    OutputParameter(vec2, OutTextureCoordinate);

    //Calculate X and Y components.
	float X = float(VERTEX_INDEX & 1);
    float Y = float(VERTEX_INDEX >> 1);

    //Calculate the clip coordinate.
    vec2 clip_coordinate;
    
    clip_coordinate.x = mix(BOUNDS_MINIMUM.x, BOUNDS_MAXIMUM.x, X);
    clip_coordinate.y = mix(BOUNDS_MINIMUM.y, BOUNDS_MAXIMUM.y, Y);

    clip_coordinate.y = 1.0f -  clip_coordinate.y;

    clip_coordinate = clip_coordinate * 2.0f - 1.0f;

    //Calculate the texture coordinate.
    OutTextureCoordinate.x = mix(TEXTURE_MINIMUM.x, TEXTURE_MAXIMUM.x, X);
    OutTextureCoordinate.y = mix(TEXTURE_MINIMUM.y, TEXTURE_MAXIMUM.y, Y);

    //Output the position.
    OutputVertexPosition(vec4(clip_coordinate, 0.0f, 1.0f));
}

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec2, InTextureCoordinate);

    //Sample the texture.
    float texture_sample = texture(sampler2D(TEXTURES[TEXTURE_INDEX], SAMPLER), InTextureCoordinate).x;

    //Calculate the opacity.
    float opacity = smoothstep(0.5f - SMOOTHING_FACTOR, 0.5f, texture_sample) * COLOR_OPACITY.a;

    //Output the fragments.
    OutputFragment(SceneLowDynamicRange1, vec4(COLOR_OPACITY.rgb, opacity));
}