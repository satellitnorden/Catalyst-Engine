//Declare input render targets.
InputRenderTarget(InputRenderTarget /* Identifier */, LINEAR /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);

//Declare output render targets.
OutputRenderTarget(OutputRenderTarget);

//Declare render resolution.
RenderResolution(MAIN_HALF);

//Set the load/store operators.
ColorStoreOperator(STORE);

//Set the topology.
Topology(TRIANGLE_FAN);

//Declare push constant data.
PushConstantData(vec2, INVERSE_SOURCE_RESOLUTION);

//Subscribe to input streams.
SubscribeToInputStream(BloomDownsample);

//The vertex shader.
IncludeCommonVertexShader(ViewportScreenCoordinate);

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec2, InScreenCoordinate);

    //Sample the input render target at various locations.
    vec4 A = texture(InputRenderTarget, InScreenCoordinate + vec2(-INVERSE_SOURCE_RESOLUTION.x * 2.0f,  INVERSE_SOURCE_RESOLUTION.y * 2.0f));
    vec4 B = texture(InputRenderTarget, InScreenCoordinate + vec2(0.0f,                                 INVERSE_SOURCE_RESOLUTION.y * 2.0f));
    vec4 C = texture(InputRenderTarget, InScreenCoordinate + vec2(INVERSE_SOURCE_RESOLUTION.x * 2.0f,   INVERSE_SOURCE_RESOLUTION.y * 2.0f));

    vec4 D = texture(InputRenderTarget, InScreenCoordinate + vec2(-INVERSE_SOURCE_RESOLUTION.x * 2.0f,  0.0f));
    vec4 E = texture(InputRenderTarget, InScreenCoordinate + vec2(0.0f,                                 0.0f));
    vec4 F = texture(InputRenderTarget, InScreenCoordinate + vec2(INVERSE_SOURCE_RESOLUTION.x * 2.0f,   0.0f));

    vec4 G = texture(InputRenderTarget, InScreenCoordinate + vec2(-INVERSE_SOURCE_RESOLUTION.x * 2.0f,  -INVERSE_SOURCE_RESOLUTION.y * 2.0f));
    vec4 H = texture(InputRenderTarget, InScreenCoordinate + vec2(0.0f,                                 -INVERSE_SOURCE_RESOLUTION.y * 2.0f));
    vec4 I = texture(InputRenderTarget, InScreenCoordinate + vec2(INVERSE_SOURCE_RESOLUTION.x * 2.0f,   -INVERSE_SOURCE_RESOLUTION.y * 2.0f));

    vec4 J = texture(InputRenderTarget, InScreenCoordinate + vec2(-INVERSE_SOURCE_RESOLUTION.x,         INVERSE_SOURCE_RESOLUTION.y));
    vec4 K = texture(InputRenderTarget, InScreenCoordinate + vec2(INVERSE_SOURCE_RESOLUTION.x,          INVERSE_SOURCE_RESOLUTION.y));
    vec4 L = texture(InputRenderTarget, InScreenCoordinate + vec2(-INVERSE_SOURCE_RESOLUTION.x,         -INVERSE_SOURCE_RESOLUTION.y));
    vec4 M = texture(InputRenderTarget, InScreenCoordinate + vec2(INVERSE_SOURCE_RESOLUTION.x,          -INVERSE_SOURCE_RESOLUTION.y));

    //Perform the blend.
    vec4 blend = vec4(0.0f);

    blend += E * 0.125f;
    blend += (A + C + G + I) * 0.03125f;
    blend += (B + D + F + H) * 0.0625f;
    blend += (J + K + L + M) * 0.125f;

    //Output the fragment.
    OutputFragment(OutputRenderTarget, blend);
}