//Declare unifom buffer includes.
IncludeUniformBuffer(Camera);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(Camera);
IncludeShaderFunctionLibrary(Math);

//Declare output depth buffer.
OutputDepthBuffer(SceneDepthBuffer);

//Declare output render targets.
OutputRenderTarget(Scene);

//Declare render resolution.
RenderResolution(MAIN_FULL);

//Set the load/store operators.
ColorLoadOperator(LOAD);
ColorStoreOperator(STORE);
DepthStencilLoadOperator(LOAD);
DepthStencilStoreOperator(STORE);

//Set the cull mode.
CullMode(NONE);

//Set depth/stencil properties.
DepthCompareOperator(GREATER_OR_EQUAL);
DepthTestEnable();

//Set the topology.
Topology(TRIANGLE_FAN);

//Set blend properties.
BlendEnable();
BlendColorSourceFactor(SOURCE_ALPHA);
BlendColorDestinationFactor(ONE_MINUS_SOURCE_ALPHA);
BlendColorOperator(ADD);
BlendAlphaSourceFactor(ONE);
BlendAlphaDestinationFactor(ZERO);
BlendAlphaOperator(ADD);

//Declare push constant data.
PushConstantData(vec4, POSITION_RADIUS);

//Subscribe to input streams.
SubscribeToInputStream(CircleMarker);

//The vertex shader.
Vertex
{
    //Declare output parameters.
    OutputParameter(vec3, OutWorldPosition);
    
    //Calculate the offset.
    vec3 offset = 

    //Calculate the world position.
    OutWorldPosition = POSITION_RADIUS.xyz + (RotateYaw(vec3(1.0f, 0.0f, 0.0f), float(VERTEX_INDEX - 1) / 32.0f * PI * 2.0f) * POSITION_RADIUS.w * float(VERTEX_INDEX > 0));

    //Output the position.
    OutputVertexPosition(WORLD_TO_CLIP_MATRIX * vec4(OutWorldPosition, 1.0f));
}

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec3, InWorldPosition);

    //Calculate the distance.
    float distance = length(POSITION_RADIUS.xyz - InWorldPosition);

    //Calculate if this is the outer circle.
    bool outer_circle = (POSITION_RADIUS.w - distance) < 0.1f;

    //Output the fragments.
    OutputFragment(Scene, vec4(0.0f, 1.0f, 1.0f, outer_circle ? 1.0f : 0.25f));
}