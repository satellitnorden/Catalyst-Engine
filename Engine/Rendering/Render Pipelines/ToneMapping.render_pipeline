//Declare unifom buffer includes.
IncludeUniformBuffer(General);
IncludeUniformBuffer(PostProcessing);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(BlueNoise);
IncludeShaderFunctionLibrary(ToneMapping);

//Declare input render targets.
InputRenderTarget(Scene /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);

//Declare output render targets.
OutputRenderTarget(SceneLowDynamicRange1);

//Declare render resolution.
RenderResolution(MAIN_FULL);

//Set the load/store operators.
ColorStoreOperator(STORE);

//Set the topology.
Topology(TRIANGLE_FAN);

//Subscribe to input streams.
SubscribeToInputStream(Viewport);

//The vertex shader.
IncludeCommonVertexShader(ViewportScreenCoordinate);

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec2, InScreenCoordinate);

    //Sample the scene.
    vec3 scene = texture(Scene, InScreenCoordinate).rgb;

    //Apply tone mapping.
    vec3 tone_mapped_scene = ApplyToneMapping(scene);

    //Apply dithering.
    {
        vec4 blue_noise_sample = SampleBlueNoiseTexture(uvec2(FRAGMENT_COORDINATE.xy), 0);

        tone_mapped_scene[0] = clamp(tone_mapped_scene[0] + ((blue_noise_sample[0] - 0.5f) * 0.003921568627451f), 0.0f, 1.0f);
        tone_mapped_scene[1] = clamp(tone_mapped_scene[1] + ((blue_noise_sample[1] - 0.5f) * 0.003921568627451f), 0.0f, 1.0f);
        tone_mapped_scene[2] = clamp(tone_mapped_scene[2] + ((blue_noise_sample[2] - 0.5f) * 0.003921568627451f), 0.0f, 1.0f);
    }

    //Calculate the luminance.
    float luminance = sqrt(Luminance(tone_mapped_scene));

    //Output the fragment.
    OutputFragment(SceneLowDynamicRange1, vec4(tone_mapped_scene, luminance));
}