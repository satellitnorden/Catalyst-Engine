//Declare uniform buffer includes.
IncludeUniformBuffer(Camera);
IncludeUniformBuffer(General);
IncludeUniformBuffer(World);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(Camera);
IncludeShaderFunctionLibrary(World);

//Declare output depth buffer.
OutputDepthBuffer(SceneDepthBuffer);

//Declare output render targets.
OutputRenderTarget(SceneFeatures2);
OutputRenderTarget(Scene);

//Declare render resolution.
RenderResolution(MAIN_FULL);

//Set the load/store operators.
DepthStencilLoadOperator(LOAD);
DepthStencilStoreOperator(STORE);
ColorLoadOperator(LOAD);
ColorStoreOperator(STORE);

//Set depth/stencil properties.
StencilTestEnable();
StencilFailOperator(KEEP);
StencilPassOperator(KEEP);
StencilDepthFailOperator(KEEP);
StencilCompareOperator(NOT_EQUAL);
StencilCompareMask(1);
StencilWriteMask(0);
StencilReferenceMask(1);

//Set the topology.
Topology(TRIANGLE_FAN);

//Subscribe to input streams.
SubscribeToInputStream(Viewport);

//The vertex shader.
IncludeCommonVertexShader(ViewportScreenCoordinate);

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec2, InScreenCoordinate);

    //Calculate the world position.
    vec3 world_position = CalculateWorldPosition(InScreenCoordinate, 0.0f);

    //Calculate the view direction.
    vec3 view_direction = normalize(world_position - CAMERA_WORLD_POSITION);

    //Sample the sky.
    //float lod_level = float(FRAME % 1200) / 1200.0f * MAXIMUM_SKY_TEXTURE_MIP_LEVEL;
    float lod_level = 0.0f;
    vec3 sky = SampleSky(view_direction, lod_level);

    //Output the fragment.
    OutputFragment(SceneFeatures2, vec4(0.0f, 1.0f, 0.0f, 0.0f));
    OutputFragment(Scene, vec4(sky, 1.0f));
}