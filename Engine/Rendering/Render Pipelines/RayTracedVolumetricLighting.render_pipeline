//Declare uniform buffer includes.
IncludeUniformBuffer(Camera);
IncludeUniformBuffer(General);
IncludeUniformBuffer(World);

//Declare storage buffer includes.
IncludeStorageBuffer(Lighting);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(BlueNoise);
IncludeShaderFunctionLibrary(Camera);
IncludeShaderFunctionLibrary(Lighting);
IncludeShaderFunctionLibrary(Noise);
IncludeShaderFunctionLibrary(RenderingConfiguration);
IncludeShaderFunctionLibrary(VolumetricLighting);

//Declare compute render targets.
ComputeRenderTarget(SceneFeatures2Half, RGBA_FLOAT32);
ComputeRenderTarget(VolumetricLighting, RGBA_FLOAT32);

//Declare samplers.
Sampler(SAMPLER /* Name */, LINEAR /* Magnification Filter */, LINEAR /* Mipmap Mode */, REPEAT /* Address Mode */, 8 /* Anisotropic Samples */);

//Subscribe to input streams.
SubscribeToInputStream(RayTracingViewportHalf);

//The ray generation shader.
RayGeneration
{
    //Declare payloads.
    Payload(0, float, VISIBILITY);

    //Constants.
    #define SCATTERING (vec3(0.8f, 0.9f, 1.0f) * 0.125f * 0.125f)
    #define NUMBER_OF_SAMPLES (4)
    #define SAMPLE_RECIPROCAL (1.0f / NUMBER_OF_SAMPLES)
    #define HALF_SAMPLE_RECIPROCAL (SAMPLE_RECIPROCAL / 2)

    //Calculate the start position.
    vec3 start_position = CAMERA_WORLD_POSITION;

    //Calculate the screen coordinate.
    vec2 screen_coordinate = (vec2(RAY_TRACING_ID.xy) + vec2(0.5f)) / vec2(RAY_TRACING_SIZE.xy);

    //Sample the scene features.
    vec4 scene_features_2 = ImageLoad(SceneFeatures2Half, ivec2(RAY_TRACING_ID.xy));

    //Cache properties.
    float depth = scene_features_2.w;

    //Calculate the world position.
    vec3 world_position = CalculateWorldPosition(screen_coordinate, depth);

    //Calculate the hit distance.
    float hit_distance = length(world_position - start_position);
	float hit_distance_reciprocal = 1.0f / hit_distance;

    //Generate the ray direction.
	vec3 ray_direction = (world_position - start_position) * hit_distance_reciprocal;

    //Set up the offsets.
    float offsets[NUMBER_OF_SAMPLES];

    for (uint i = 0; i < NUMBER_OF_SAMPLES; ++i)
    {
        offsets[i] = HALF_SAMPLE_RECIPROCAL + SAMPLE_RECIPROCAL * float(i);
    }

    //Jitter the offsets a bit.
    for (uint i = 0; i < NUMBER_OF_SAMPLES; i += 4)
    {
        vec4 blue_noise_texture_sample = (SampleBlueNoiseTexture(uvec2(RAY_TRACING_ID.xy), i / 4) - 0.5f) * (SAMPLE_RECIPROCAL - FLOAT32_EPSILON);
        
        offsets[i * 4 + 0] += blue_noise_texture_sample.x;
        offsets[i * 4 + 1] += blue_noise_texture_sample.y;
        offsets[i * 4 + 2] += blue_noise_texture_sample.z;
        offsets[i * 4 + 3] += blue_noise_texture_sample.w;
    }

    //Bias the offsets a bit to to be closet to the camera.
    for (uint i = 0; i < NUMBER_OF_SAMPLES; ++i)
    {
        offsets[i] *= offsets[i];
    }

    //Calculate the volumetric lighting.
	vec3 volumetric_lighting = vec3(0.0f);
    float transmittance = 1.0f;

    for (uint sample_index = 0; sample_index < NUMBER_OF_SAMPLES; ++sample_index)
    {
        //Calculate the current sample position and hit distance.
        float previous_offset = sample_index > 0 ? offsets[sample_index - 1] : 0.0f;
        float current_offset = offsets[sample_index];
        vec3 sample_position = mix(start_position, world_position, current_offset);
        float sample_hit_distance = (hit_distance * current_offset) - (hit_distance * previous_offset);

        //Cache the extinction.
        float extinction = GetExtinctionAtPosition(sample_position);

        //Calculate the attenuation factor.
        float attenuation_factor = exp(-extinction * sample_hit_distance);

        //Add ambient lighting.
        {
            //Go with an average of the sky color.
            float ambient_attenuation = mix(CalculateAttenuationInDirection(sample_position, vec3(0.0f, 1.0f, 0.0f), FAR_PLANE), CalculateAttenuationInDirection(sample_position, vec3(0.0f, -1.0f, 0.0f), FAR_PLANE), 0.5f);
            vec3 scattering = mix(UPPER_SKY_COLOR, LOWER_SKY_COLOR, 0.5f) * SCATTERING * (1.0f / (4.0f * 3.14f)) * ambient_attenuation;
            vec3 scattering_integral = (scattering - scattering * attenuation_factor) / max(extinction, FLOAT32_EPSILON);
            volumetric_lighting += transmittance * scattering_integral;
        }

        //Iterate over all lights.
        for (uint i = 0; i < LIGHTING_HEADER._NumberOfLights; ++i)
        {
            //Unpack the light.
		    Light light = UnpackLight(i);

            //Only care if this light is volumetric.
            if (TEST_BIT(light._LightProperties, LIGHT_PROPERTY_VOLUMETRIC_BIT))
            {
                //Calculate the light radiance.
                vec3 light_radiance = light._Color * light._Intensity;

                switch (light._LightType)
                {
                    case LIGHT_TYPE_DIRECTIONAL:
                    {
                        //float light_attenuation = CalculateAttenuationInDirection(sample_position, -light._TransformData1, FAR_PLANE * 2.0f);
                        float light_attenuation = CalculateAttenuationInDirection(sample_position, -light._TransformData1, hit_distance);
                        vec3 scattering = light_radiance * SCATTERING * HenyeyGreensteinPhaseFunction(ray_direction, light._TransformData1) * light_attenuation;
                        
                        {
                            //Reset the visibility.
                            VISIBILITY = 0.0f;

                            //Set up the ray tracing flags.
                            uint ray_tracing_flags =    RAY_TRACING_FLAG_TERMINATE_ON_FIRST_HIT
                                                        | RAY_TRACING_FLAG_SKIP_CLOSEST_HIT;

                            //Calculate the direction.
                            vec3 direction = -light._TransformData1;

                            //Trace the ray!
                            TraceRay(ray_tracing_flags, 0, sample_position, direction, FLOAT32_MAXIMUM, 0);
                        }

                        scattering *= VISIBILITY;
                        
                        vec3 scattering_integral = (scattering - scattering * attenuation_factor) / max(extinction, FLOAT32_EPSILON);
                        volumetric_lighting += transmittance * scattering_integral;
                
                        break;
                    }
                }
            }
        }

        //Update the transmittance.
        transmittance *= attenuation_factor;
    }

    //Store the volumetric lighting.
    ImageStore(VolumetricLighting, ivec2(RAY_TRACING_ID.xy), vec4(volumetric_lighting, 1.0f));
}

//The ray miss shader.
RayMiss
{
    //Declare payloads.
    Payload(0, float, VISIBILITY);

    //Set the visibility.
    VISIBILITY = 1.0f;
}

//Declare a new hit group.
HitGroup(MaskedModels);

//The ray any hit shader.
RayAnyHit
{
    //Retrieve the hit vertex information.
    HitVertexInformation hit_vertex_information = GetHitVertexInformation();

    //Retrieve the hit material index.
    uint hit_material_index = GetHitMaterialIndex();

    //Evaluate the opacity.
    float opacity;
    EVALUATE_OPACITY(MATERIALS[hit_material_index], hit_vertex_information._TextureCoordinate, SAMPLER, opacity);

    //Check if this hit should be ignored.
    if (opacity < 0.5f)
    {
        IgnoreHit();
    }
}