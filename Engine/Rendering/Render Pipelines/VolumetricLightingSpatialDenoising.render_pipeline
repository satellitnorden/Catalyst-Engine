//Declare uniform buffer includes.
IncludeUniformBuffer(Camera);
IncludeUniformBuffer(General);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(Camera);

//Declare input render targets.
InputRenderTarget(SceneFeatures2Half /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(InputVolumetricLighting /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);

//Declare output render targets.
OutputRenderTarget(OutputVolumetricLighting);

//Declare render resolution.
RenderResolution(MAIN_HALF);

//Set the load/store operators.
ColorStoreOperator(STORE);

//Set the topology.
Topology(TRIANGLE_FAN);

//Subscribe to input streams.
SubscribeToInputStream(Viewport);

//The vertex shader.
IncludeCommonVertexShader(ViewportScreenCoordinate);

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec2, InScreenCoordinate);

    //Retrieve the linearized depth.
    float linearized_depth = LinearizeDepth(texture(SceneFeatures2Half, InScreenCoordinate).w);

    //Sample neighboring fragments.
	vec4 denoised_volumetric_lighting = vec4(0.0f);
	float weight_sum = 0.0f;

	for (int Y = -2; Y <= 2; ++Y)
	{
		for (int X = -2; X <= 2; ++X)
		{
			vec2 sample_coordinate = InScreenCoordinate + vec2(float(X), float(Y)) * INVERSE_HALF_MAIN_RESOLUTION;

			vec4 sample_volumetric_lighting = texture(InputVolumetricLighting, sample_coordinate);
			float sample_linearized_depth = LinearizeDepth(texture(SceneFeatures2Half, sample_coordinate).w);

			/*
			*	Calculate the sample weight based on certain criteria;
			*	
			*	1. Is the sample coordinate a valid screen coordinate?
			*	2. How closely aligned are the linearized depths to each other?
			*/
			float sample_weight = 1.0f;

			sample_weight *= float(ValidScreenCoordinate(sample_coordinate));
			sample_weight *= exp(-abs(linearized_depth - sample_linearized_depth));

			denoised_volumetric_lighting += sample_volumetric_lighting * sample_weight;
			weight_sum += sample_weight;
		}
	}
	
	//Normalize the denoised ambient occlusion. 
	denoised_volumetric_lighting = denoised_volumetric_lighting / weight_sum;

    //Write the fragment.
    OutputFragment(OutputVolumetricLighting, denoised_volumetric_lighting);
}