//Declare unifom buffer includes.
IncludeUniformBuffer(Camera);
IncludeUniformBuffer(General);
IncludeUniformBuffer(Water);
IncludeUniformBuffer(World);

//Declare storage buffer includes.
IncludeStorageBuffer(Lighting);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(Camera);
IncludeShaderFunctionLibrary(Lighting);
IncludeShaderFunctionLibrary(WaterSimulation);

//Declare input render targets.
InputRenderTarget(SceneFeatures2 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneInput /* Identifier */, LINEAR /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);

//Declare output depth buffer.
OutputDepthBuffer(SceneDepthBuffer);

//Declare output render targets.
OutputRenderTarget(Scene);

//Declare render resolution.
RenderResolution(MAIN_FULL);

//Set the cull mode.
CullMode(BACK);

//Set the load/store operators.
DepthStencilLoadOperator(LOAD);
DepthStencilStoreOperator(STORE);
ColorLoadOperator(LOAD);
ColorStoreOperator(STORE);

//Set depth/stencil properties.
DepthCompareOperator(GREATER);
DepthTestEnable();
DepthWriteEnable();
StencilTestEnable();
StencilFailOperator(KEEP);
StencilPassOperator(REPLACE);
StencilDepthFailOperator(KEEP);
StencilCompareOperator(ALWAYS);
StencilCompareMask(0);
StencilWriteMask(1);
StencilReferenceMask(1);

//Set the topology.
Topology(TRIANGLE_LIST);

//Declare push constant data.
PushConstantData(vec3, WORLD_POSITION);
PushConstantData(uint, BORDERS);
PushConstantData(float, PATCH_RESOLUTION_RECIPROCAL);
PushConstantData(float, PATCH_SIZE);
PushConstantData(uint, TEXTURE_INDEX);

//Subscribe to input streams.
SubscribeToInputStream(Water);

//Declare samplers.
Sampler(SAMPLER /* Name */, LINEAR /* Magnification Filter */, LINEAR /* Mipmap Mode */, REPEAT /* Address Mode */, 8 /* Anisotropic Samples */);

//The vertex shader.
Vertex
{
    //Declare input parameters.
    InputParameter(vec2, InPosition);
    InputParameter(uint, InBorders);

    //Declare output parameters.
    OutputParameter(vec3, OutWorldPosition);

    //Calculate the stitched position.
    vec2 stitched_position = InPosition;

    //Apply the first layer of stiching.
    {
	    float is_left_multiplier = float((InBorders & BIT(0)) & (BORDERS & BIT(0)));
    	float is_right_multiplier = float((InBorders & BIT(2)) & (BORDERS & BIT(2)));
	    float vertical_offset = min(is_left_multiplier + is_right_multiplier, 1.0f);

        float is_down_multiplier = float((InBorders & BIT(4)) & (BORDERS & BIT(4)));
    	float is_up_multiplier = float((InBorders & BIT(6)) & (BORDERS & BIT(6)));
	    float horizontal_offset = min(is_down_multiplier + is_up_multiplier, 1.0f);

	    stitched_position.y -= PATCH_RESOLUTION_RECIPROCAL * vertical_offset;
	    stitched_position.x -= PATCH_RESOLUTION_RECIPROCAL * horizontal_offset;
    }

    //Apply the second layer of stiching.
    {
	    float is_left_multiplier = float((InBorders & BIT(1)) & (BORDERS & BIT(1)));
    	float is_right_multiplier = float((InBorders & BIT(3)) & (BORDERS & BIT(3)));
	    float vertical_offset = min(is_left_multiplier + is_right_multiplier, 1.0f);

        float is_down_multiplier = float((InBorders & BIT(5)) & (BORDERS & BIT(5)));
    	float is_up_multiplier = float((InBorders & BIT(7)) & (BORDERS & BIT(7)));
	    float horizontal_offset = min(is_down_multiplier + is_up_multiplier, 1.0f);

	    stitched_position.y -= (PATCH_RESOLUTION_RECIPROCAL * 2.0f) * vertical_offset;
	    stitched_position.x -= (PATCH_RESOLUTION_RECIPROCAL * 2.0f) * horizontal_offset;
    }

    //Calculate the world position.
    OutWorldPosition.x = WORLD_POSITION.x + mix(-(PATCH_SIZE * 0.5f), (PATCH_SIZE * 0.5f), stitched_position.x);
    OutWorldPosition.y = WORLD_POSITION.y;
    OutWorldPosition.z = WORLD_POSITION.z + mix(-(PATCH_SIZE * 0.5f), (PATCH_SIZE * 0.5f), stitched_position.y);

    //Calculate the height.
    OutWorldPosition.y += WaterHeightAtPosition(OutWorldPosition, TEXTURE_INDEX);

    //Output the position.
    OutputVertexPosition(WORLD_TO_CLIP_MATRIX * vec4(OutWorldPosition, 1.0f));
}

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec3, InWorldPosition);

    //Constants.
    #define WATER_ALBEDO (vec3(0.0f, 0.25f, 0.25f))

    //Calculate the view direction.
    vec3 view_direction = normalize(CAMERA_WORLD_POSITION - InWorldPosition);

    //Calculate the water normal.
    vec3 water_normal = WaterNormalAtPosition(InWorldPosition, TEXTURE_INDEX);

    //Calculate the screen coordinate.
    vec2 screen_coordinate = vec2(FRAGMENT_COORDINATE.xy) * INVERSE_FULL_MAIN_RESOLUTION;

    //Sample scene features 2.
    vec4 scene_features_2 = texture(SceneFeatures2, screen_coordinate);

    //Calculate the surface depth.
    float surface_depth = LinearizeDepth(FRAGMENT_COORDINATE.z);

    //Calculate the underwater depth.
    float underwater_depth = LinearizeDepth(scene_features_2.w);

    //Calculate the underwater weight.
    float underwater_weight = exp(-(underwater_depth - surface_depth) * 0.125f * 0.125f);

    //Offset the screen coordinate a bit based on the normal.
    screen_coordinate += water_normal.xz * (1.0f - underwater_weight) * 0.125f;

    //Retrieve the underwater scene.
    vec3 underwater_scene = texture(SceneInput, screen_coordinate).rgb;

    //Darken the underwater scene a bit.
    underwater_scene *= 0.8f;

    //Calculate the water scene.
    vec3 water_scene = vec3(0.0f);

    //Add some ambient lighting from the sky.
    {
        float sky_alpha = dot(water_normal, vec3(0.0f, 1.0f, 0.0f)) * 0.5f + 0.5f;
        vec3 sky_radiance = mix(LOWER_SKY_COLOR, UPPER_SKY_COLOR, sky_alpha);
        water_scene += sky_radiance * WATER_ALBEDO;
    }

    //Add some lighting.
    for (uint i = 0; i < LIGHTING_HEADER._NumberOfLights; ++i)
    {
        //Unpack the light.
        Light light = UnpackLight(i);

        //Calculate the light radiance.
        vec3 light_radiance = light._Color * light._Intensity;

        switch (light._LightType)
        {
            case LIGHT_TYPE_DIRECTIONAL:
            {
                //Retrieve the direction.
                vec3 light_direction = -light._TransformData1;

                //Calculate the halfway vector.
                vec3 halfway_vector = normalize(view_direction + light_direction);

                //Add to the scene!
                water_scene += light_radiance * WATER_ALBEDO * max(dot(water_normal, light_direction), 0.0f) * 0.125f; //Diffuse.
                water_scene += light_radiance * pow(max(dot(water_normal, halfway_vector), 0.0f), 128.0f); //Specular.

                break;
            }
        }
    }

    //Calculate the final scene.
    vec3 final_scene = mix(water_scene, underwater_scene, underwater_weight);

    //Output the fragment.
    OutputFragment(Scene, vec4(final_scene, 1.0f));
}