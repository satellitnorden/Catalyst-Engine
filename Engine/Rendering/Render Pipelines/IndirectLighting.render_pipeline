//Declare uniform buffer includes.
IncludeUniformBuffer(Camera);
IncludeUniformBuffer(General);
IncludeUniformBuffer(RenderingConfiguration);
IncludeUniformBuffer(World);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(Camera);
IncludeShaderFunctionLibrary(Noise);
IncludeShaderFunctionLibrary(PhysicallyBasedLighting);
IncludeShaderFunctionLibrary(RenderingConfiguration);
IncludeShaderFunctionLibrary(World);

//Declare input render targets.
InputRenderTarget(SceneFeatures1 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneFeatures2 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneFeatures3 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneFeatures2Half /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(DiffuseIrradiance /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);

//Declare output depth buffer.
OutputDepthBuffer(SceneDepthBuffer);

//Declare output render targets.
OutputRenderTarget(Scene);

//Declare render resolution.
RenderResolution(MAIN_FULL);

//Set the load/store operators.
DepthStencilLoadOperator(LOAD);
DepthStencilStoreOperator(STORE);
ColorLoadOperator(LOAD);
ColorStoreOperator(STORE);

//Set depth/stencil properties.

StencilTestEnable();
StencilFailOperator(KEEP);
StencilPassOperator(KEEP);
StencilDepthFailOperator(KEEP);
StencilCompareOperator(EQUAL);
StencilCompareMask(1);
StencilWriteMask(0);
StencilReferenceMask(1);

//Set the topology.
Topology(TRIANGLE_FAN);

//Set blend properties.
BlendEnable();
BlendColorSourceFactor(ONE);
BlendColorDestinationFactor(ONE);
BlendColorOperator(ADD);
BlendAlphaSourceFactor(ONE);
BlendAlphaDestinationFactor(ZERO);
BlendAlphaOperator(ADD);

//Subscribe to input streams.
SubscribeToInputStream(Viewport);

//The vertex shader.
IncludeCommonVertexShader(ViewportScreenCoordinate);

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec2, InScreenCoordinate);

    //Sample the scene features.
    vec4 scene_features_1 = texture(SceneFeatures1, InScreenCoordinate);
    vec4 scene_features_2 = texture(SceneFeatures2, InScreenCoordinate);
    vec4 scene_features_3 = texture(SceneFeatures3, InScreenCoordinate);

    vec3 albedo = scene_features_1.rgb;
    float thickness = scene_features_1.w;
    vec3 normal = scene_features_2.xyz;
    float depth = scene_features_2.w;
    float roughness = scene_features_3.x;
    float metallic = scene_features_3.y;
    float ambient_occlusion = scene_features_3.z;
    float emissive = scene_features_3.w;

    //Calculate the world position.
    vec3 world_position = CalculateWorldPosition(InScreenCoordinate, depth);

    //Calculate the view direction.
    vec3 view_direction = normalize(CAMERA_WORLD_POSITION - world_position);

    //Calculate the incoming indirect light.
    vec3 incoming_diffuse_irradiance = vec3(0.0f, 0.0f, 0.0f);

    switch (DIFFUSE_IRRADIANCE_MODE)
    {
        case DIFFUSE_IRRADIANCE_MODE_NONE:
        {
            incoming_diffuse_irradiance = SampleSky(normal, MAXIMUM_SKY_TEXTURE_MIP_LEVEL);

            break;
        }

        case DIFFUSE_IRRADIANCE_MODE_RAY_TRACED:
        {
            vec2 sample_coordinates[4];
            
            sample_coordinates[0] = InScreenCoordinate;
            sample_coordinates[1] = InScreenCoordinate + vec2(INVERSE_HALF_MAIN_RESOLUTION.x, 0.0f);
            sample_coordinates[2] = InScreenCoordinate + vec2(0.0f, INVERSE_HALF_MAIN_RESOLUTION.y);
            sample_coordinates[3] = InScreenCoordinate + vec2(INVERSE_HALF_MAIN_RESOLUTION.x, INVERSE_HALF_MAIN_RESOLUTION.y);

            vec3 diffuse_irradiance_samples[4];
            float depth_samples[4];

            for (uint i = 0; i < 4; ++i)
            {
                diffuse_irradiance_samples[i] = texture(DiffuseIrradiance, sample_coordinates[i]).rgb;
                depth_samples[i] = LinearizeDepth(texture(SceneFeatures2Half, sample_coordinates[i]).w);
            }

            vec2 fractions = fract(InScreenCoordinate * HALF_MAIN_RESOLUTION);

            float weights[4];
            
            weights[0] = (1.0f - fractions.x) * (1.0f - fractions.y);
            weights[1] = fractions.x * (1.0f - fractions.y);
            weights[2] = (1.0f - fractions.x) * fractions.y;
            weights[3] = fractions.x * fractions.y;

            float center_depth = LinearizeDepth(depth);

            for (uint i = 0; i < 4; ++i)
            {
                weights[i] *= exp(-abs(center_depth - depth_samples[i]));
            }

            float weight_sum = weights[0] + weights[1] + weights[2] + weights[3];
            float inverse_weight_sum = 1.0f / weight_sum;

            for (uint i = 0; i < 4; ++i)
            {
                weights[i] *= inverse_weight_sum;
            }

            for (uint i = 0; i < 4; ++i)
            {
                incoming_diffuse_irradiance += diffuse_irradiance_samples[i] * weights[i];
            }

            //Add some noise to the diffuse irradiance so that the temporal anti aliasing pass has an easier time cleaning it up.
            incoming_diffuse_irradiance *= mix(0.875f, 1.125f, InterleavedGradientNoise(uvec2(FRAGMENT_COORDINATE.xy), FRAME));

            break;
        }
    }

    vec3 incoming_specular_irradiance = SampleSky(reflect(-view_direction, normal), roughness * MAXIMUM_SKY_TEXTURE_MIP_LEVEL);

    //Calculate the indirect lighting.
    vec3 indirect_lighting = CalculateIndirectLighting
    (
        view_direction,
        albedo,
        normal,
        roughness,
        metallic,
        ambient_occlusion,
        thickness,
        incoming_diffuse_irradiance * (1.0f + roughness),
        incoming_specular_irradiance
    );

    //Output the fragment.
    OutputFragment(Scene, vec4(indirect_lighting, 1.0f));
}