//Declare uniform buffer includes.
IncludeUniformBuffer(Camera);
IncludeUniformBuffer(World);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(Camera);
IncludeShaderFunctionLibrary(PhysicallyBasedLighting);
IncludeShaderFunctionLibrary(World);

//Declare input render targets.
InputRenderTarget(SceneFeatures1 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneFeatures2 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneFeatures3 /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);

//Declare output depth buffer.
OutputDepthBuffer(SceneDepthBuffer);

//Declare output render targets.
OutputRenderTarget(Scene);

//Declare render resolution.
RenderResolution(MAIN_FULL);

//Set the load/store operators.
DepthStencilLoadOperator(LOAD);
DepthStencilStoreOperator(STORE);
ColorLoadOperator(LOAD);
ColorStoreOperator(STORE);

//Set depth/stencil properties.

StencilTestEnable();
StencilFailOperator(KEEP);
StencilPassOperator(KEEP);
StencilDepthFailOperator(KEEP);
StencilCompareOperator(EQUAL);
StencilCompareMask(1);
StencilWriteMask(0);
StencilReferenceMask(1);

//Set the topology.
Topology(TRIANGLE_FAN);

//Set blend properties.
BlendEnable();
BlendColorSourceFactor(ONE);
BlendColorDestinationFactor(ONE);
BlendColorOperator(ADD);
BlendAlphaSourceFactor(ONE);
BlendAlphaDestinationFactor(ZERO);
BlendAlphaOperator(ADD);

//Subscribe to input streams.
SubscribeToInputStream(Viewport);

//The vertex shader.
IncludeCommonVertexShader(ViewportScreenCoordinate);

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec2, InScreenCoordinate);

    //Sample the scene features.
    vec4 scene_features_1 = texture(SceneFeatures1, InScreenCoordinate);
    vec4 scene_features_2 = texture(SceneFeatures2, InScreenCoordinate);
    vec4 scene_features_3 = texture(SceneFeatures3, InScreenCoordinate);

    vec3 albedo = scene_features_1.rgb;
    float thickness = scene_features_1.w;
    vec3 normal = scene_features_2.xyz;
    float depth = scene_features_2.w;
    float roughness = scene_features_3.x;
    float metallic = scene_features_3.y;
    float ambient_occlusion = scene_features_3.z;
    float emissive = scene_features_3.w;

    //Calculate the world position.
    vec3 world_position = CalculateWorldPosition(InScreenCoordinate, depth);

    //Calculate the view direction.
    vec3 view_direction = normalize(CAMERA_WORLD_POSITION - world_position);

    //Calculate the incoming indirect light.
    vec3 incoming_diffuse_irradiance = SampleSky(normal, MAXIMUM_SKY_TEXTURE_MIP_LEVEL);
    vec3 incoming_specular_irradiance = SampleSky(reflect(-view_direction, normal), roughness * MAXIMUM_SKY_TEXTURE_MIP_LEVEL);

    //Calculate the indirect lighting.
    vec3 indirect_lighting = CalculateIndirectLighting
    (
        view_direction,
        albedo,
        normal,
        roughness,
        metallic,
        ambient_occlusion,
        thickness,
        incoming_diffuse_irradiance * (1.0f + roughness),
        incoming_specular_irradiance
    );

    //Output the fragment.
    OutputFragment(Scene, vec4(indirect_lighting, 1.0f));
}