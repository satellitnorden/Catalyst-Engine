//Declare uniform buffer includes.
IncludeUniformBuffer(Camera);
IncludeUniformBuffer(General);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(Camera);

//Declare input render targets.
InputRenderTarget(PreviousTemporalBuffer /* Identifier */, LINEAR /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(InputDiffuseIrradiance /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneFeatures2Half /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);
InputRenderTarget(SceneFeatures4Half /* Identifier */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */);

//Declare output render targets.
OutputRenderTarget(CurrentTemporalBuffer);
OutputRenderTarget(OutputDiffuseIrradiance);

//Declare render resolution.
RenderResolution(MAIN_HALF);

//Set the load/store operators.
ColorStoreOperator(STORE);

//Set the topology.
Topology(TRIANGLE_FAN);

//Subscribe to input streams.
SubscribeToInputStream(Viewport);

//The vertex shader.
IncludeCommonVertexShader(ViewportScreenCoordinate);

//The fragment shader.
Fragment
{
    //Constants.
    #define FEEDBACK_FACTOR (0.9f)

    //Declare input parameters.
    InputParameter(vec2, InScreenCoordinate);

    //Sample the current diffuse irradiance.
    vec3 current_diffuse_irradiance = texture(InputDiffuseIrradiance, InScreenCoordinate).rgb;

    //Sample the current depth.
    float current_depth = LinearizeDepth(texture(SceneFeatures2Half, InScreenCoordinate).w);

    //Sample the velocity.
    vec2 velocity = texture(SceneFeatures4Half, InScreenCoordinate).xy;

    //Calculate the previous screen coordinate.
    vec2 previous_screen_coordinate = InScreenCoordinate - velocity;

    //Sample the previous diffuse irradiance.
    vec3 previous_diffuse_irradiance = texture(PreviousTemporalBuffer, previous_screen_coordinate).rgb;

#if 0
    {
        vec2 sample_coordinates[4];
            
        sample_coordinates[0] = previous_screen_coordinate;
        sample_coordinates[1] = previous_screen_coordinate + vec2(INVERSE_HALF_MAIN_RESOLUTION.x, 0.0f);
        sample_coordinates[2] = previous_screen_coordinate + vec2(0.0f, INVERSE_HALF_MAIN_RESOLUTION.y);
        sample_coordinates[3] = previous_screen_coordinate + vec2(INVERSE_HALF_MAIN_RESOLUTION.x, INVERSE_HALF_MAIN_RESOLUTION.y);
    
        vec4 previous_irradiance_samples[4];

        for (uint i = 0; i < 4; ++i)
        {
           previous_irradiance_samples[i] = texture(PreviousTemporalBuffer, sample_coordinates[i]);
        }

        vec2 fractions = fract(previous_screen_coordinate * HALF_MAIN_RESOLUTION);

        float weights[4];
            
        weights[0] = (1.0f - fractions.x) * (1.0f - fractions.y);
        weights[1] = fractions.x * (1.0f - fractions.y);
        weights[2] = (1.0f - fractions.x) * fractions.y;
        weights[3] = fractions.x * fractions.y;

        for (uint i = 0; i < 4; ++i)
        {
            weights[i] *= exp(-abs(current_depth - previous_irradiance_samples[i].w));
        }

        float weight_sum = weights[0] + weights[1] + weights[2] + weights[3];
        float inverse_weight_sum = weight_sum > 0.0f ? 1.0f / weight_sum : 1.0f;

        for (uint i = 0; i < 4; ++i)
        {
            weights[i] *= inverse_weight_sum;
        }

        for (uint i = 0; i < 4; ++i)
        {
            previous_diffuse_irradiance += previous_irradiance_samples[i].rgb * weights[i];
        }

        highest_previous_weight = max(max(weights[0], weights[1]), max(weights[2], weights[3]));
    }
#endif

    /*
	*	Calculate the weight between the current frame and the history depending on certain criteria.
	*
	*	1. Is the previous screen coordinate outside the screen? If so, it's not valid.
	*/
	float previous_sample_weight = 1.0f;

	previous_sample_weight *= float(ValidScreenCoordinate(previous_screen_coordinate));

    //Apply the feedback factor.
    previous_sample_weight *= FEEDBACK_FACTOR;

    //Blend the previous and the current diffuse irradiance.
    vec3 blended_diffuse_irradiance;

    if (!isnan(previous_diffuse_irradiance.x))
    {
        blended_diffuse_irradiance = mix(current_diffuse_irradiance, previous_diffuse_irradiance, previous_sample_weight);
    }

    else
    {
        blended_diffuse_irradiance = current_diffuse_irradiance;
    }

    //Output the fragments.
    OutputFragment(CurrentTemporalBuffer, vec4(blended_diffuse_irradiance, 1.0f));
    OutputFragment(OutputDiffuseIrradiance, vec4(blended_diffuse_irradiance, 1.0f));
}