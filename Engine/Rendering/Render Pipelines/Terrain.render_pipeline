//Declare unifom buffer includes.
IncludeUniformBuffer(Camera);

//Declare shader function library includes.
IncludeShaderFunctionLibrary(Camera);
IncludeShaderFunctionLibrary(Math);
IncludeShaderFunctionLibrary(Noise);
IncludeShaderFunctionLibrary(Terrain);

//Declare output depth buffer.
OutputDepthBuffer(SceneDepthBuffer);

//Declare output render targets.
OutputRenderTarget(SceneFeatures1);
OutputRenderTarget(SceneFeatures2);
OutputRenderTarget(SceneFeatures3);
OutputRenderTarget(SceneFeatures4);

//Declare render resolution.
RenderResolution(MAIN_FULL);

//Set the cull mode.
CullMode(BACK);

//Set the load/store operators.
DepthStencilLoadOperator(LOAD);
DepthStencilStoreOperator(STORE);
ColorLoadOperator(LOAD);
ColorStoreOperator(STORE);

//Set depth/stencil properties.
DepthCompareOperator(GREATER);
DepthTestEnable();
DepthWriteEnable();
StencilTestEnable();
StencilFailOperator(KEEP);
StencilPassOperator(REPLACE);
StencilDepthFailOperator(KEEP);
StencilCompareOperator(ALWAYS);
StencilCompareMask(0);
StencilWriteMask(1);
StencilReferenceMask(1);

//Set the topology.
Topology(TRIANGLE_LIST);

//Declare push constant data.
PushConstantData(vec2, WORLD_POSITION);
PushConstantData(vec2, MINIMUM_HEIGHT_MAP_COORDINATE);
PushConstantData(vec2, MAXIMUM_HEIGHT_MAP_COORDINATE);
PushConstantData(uint, BORDERS);
PushConstantData(float, PATCH_RESOLUTION_RECIPROCAL);
PushConstantData(float, PATCH_SIZE);
PushConstantData(uint, HEIGHT_MAP_TEXTURE_INDEX);
PushConstantData(uint, NORMAL_MAP_TEXTURE_INDEX);
PushConstantData(uint, INDEX_MAP_TEXTURE_INDEX);
PushConstantData(uint, BLEND_MAP_TEXTURE_INDEX);
PushConstantData(float, MAP_RESOLUTION);
PushConstantData(float, MAP_RESOLUTION_RECIPROCAL);

//Declare samplers.
Sampler(HEIGHT_MAP_SAMPLER /* Name */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */, 0 /* Anisotropic Samples */);
Sampler(NORMAL_MAP_SAMPLER /* Name */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */, 0 /* Anisotropic Samples */);
Sampler(INDEX_BLEND_MAP_SAMPLER /* Name */, NEAREST /* Magnification Filter */, NEAREST /* Mipmap Mode */, CLAMP_TO_EDGE /* Address Mode */, 0 /* Anisotropic Samples */);
Sampler(MATERIAL_SAMPLER /* Name */, LINEAR /* Magnification Filter */, LINEAR /* Mipmap Mode */, REPEAT /* Address Mode */, 8 /* Anisotropic Samples */);

//Subscribe to input streams.
SubscribeToInputStream(Terrain);

//The vertex shader.
Vertex
{
    //Declare input parameters.
    InputParameter(vec2, InPosition);
    InputParameter(uint, InBorders);

    //Declare output parameters.
    OutputParameter(vec3, OutWorldPosition);
    OutputParameter(vec2, OutHeightMapTextureCoordinate);

    //Calculate the stitched position.
    vec2 stitched_position = InPosition;

    //Apply the first layer of stiching.
    {
	    float is_left_multiplier = float((InBorders & BIT(0)) & (BORDERS & BIT(0)));
    	float is_right_multiplier = float((InBorders & BIT(2)) & (BORDERS & BIT(2)));
	    float vertical_offset = min(is_left_multiplier + is_right_multiplier, 1.0f);

        float is_down_multiplier = float((InBorders & BIT(4)) & (BORDERS & BIT(4)));
    	float is_up_multiplier = float((InBorders & BIT(6)) & (BORDERS & BIT(6)));
	    float horizontal_offset = min(is_down_multiplier + is_up_multiplier, 1.0f);

	    stitched_position.y -= PATCH_RESOLUTION_RECIPROCAL * vertical_offset;
	    stitched_position.x -= PATCH_RESOLUTION_RECIPROCAL * horizontal_offset;
    }

    //Apply the second layer of stiching.
    {
	    float is_left_multiplier = float((InBorders & BIT(1)) & (BORDERS & BIT(1)));
    	float is_right_multiplier = float((InBorders & BIT(3)) & (BORDERS & BIT(3)));
	    float vertical_offset = min(is_left_multiplier + is_right_multiplier, 1.0f);

        float is_down_multiplier = float((InBorders & BIT(5)) & (BORDERS & BIT(5)));
    	float is_up_multiplier = float((InBorders & BIT(7)) & (BORDERS & BIT(7)));
	    float horizontal_offset = min(is_down_multiplier + is_up_multiplier, 1.0f);

	    stitched_position.y -= (PATCH_RESOLUTION_RECIPROCAL * 2.0f) * vertical_offset;
	    stitched_position.x -= (PATCH_RESOLUTION_RECIPROCAL * 2.0f) * horizontal_offset;
    }

    //Calculate the height map coordinate.
    vec2 height_map_coordinate = vec2(mix(MINIMUM_HEIGHT_MAP_COORDINATE.x, MAXIMUM_HEIGHT_MAP_COORDINATE.x, stitched_position.x), mix(MINIMUM_HEIGHT_MAP_COORDINATE.y, MAXIMUM_HEIGHT_MAP_COORDINATE.y, stitched_position.y));

    //Calculate the world position.
    OutWorldPosition.x = WORLD_POSITION.x + mix(-(PATCH_SIZE * 0.5f), (PATCH_SIZE * 0.5f), stitched_position.x);
    OutWorldPosition.y = 0.0f;
    OutWorldPosition.z = WORLD_POSITION.y + mix(-(PATCH_SIZE * 0.5f), (PATCH_SIZE * 0.5f), stitched_position.y);

    //Sample the heightmap.
    {
        float height_1 = texture(sampler2D(TEXTURES[HEIGHT_MAP_TEXTURE_INDEX], HEIGHT_MAP_SAMPLER), height_map_coordinate + vec2(0.0f, 0.0f) * MAP_RESOLUTION_RECIPROCAL).x;
        float height_2 = texture(sampler2D(TEXTURES[HEIGHT_MAP_TEXTURE_INDEX], HEIGHT_MAP_SAMPLER), height_map_coordinate + vec2(0.0f, 1.0f) * MAP_RESOLUTION_RECIPROCAL).x;
        float height_3 = texture(sampler2D(TEXTURES[HEIGHT_MAP_TEXTURE_INDEX], HEIGHT_MAP_SAMPLER), height_map_coordinate + vec2(1.0f, 0.0f) * MAP_RESOLUTION_RECIPROCAL).x;
        float height_4 = texture(sampler2D(TEXTURES[HEIGHT_MAP_TEXTURE_INDEX], HEIGHT_MAP_SAMPLER), height_map_coordinate + vec2(1.0f, 1.0f) * MAP_RESOLUTION_RECIPROCAL).x;
    
        float blend_1 = mix(height_1, height_2, fract(height_map_coordinate.y * MAP_RESOLUTION));
	    float blend_2 = mix(height_3, height_4, fract(height_map_coordinate.y * MAP_RESOLUTION));

	    float final_height = mix(blend_1, blend_2, fract(height_map_coordinate.x * MAP_RESOLUTION));

        OutWorldPosition.y = final_height;
    }
    
    //Sample the normal map.
    vec3 normals[4];
    vec3 normal;

    {
        normals[0] = texture(sampler2D(TEXTURES[NORMAL_MAP_TEXTURE_INDEX], NORMAL_MAP_SAMPLER), height_map_coordinate + vec2(0.0f, 0.0f) * MAP_RESOLUTION_RECIPROCAL).xyz;
        normals[1] = texture(sampler2D(TEXTURES[NORMAL_MAP_TEXTURE_INDEX], NORMAL_MAP_SAMPLER), height_map_coordinate + vec2(0.0f, 1.0f) * MAP_RESOLUTION_RECIPROCAL).xyz;
        normals[2] = texture(sampler2D(TEXTURES[NORMAL_MAP_TEXTURE_INDEX], NORMAL_MAP_SAMPLER), height_map_coordinate + vec2(1.0f, 0.0f) * MAP_RESOLUTION_RECIPROCAL).xyz;
        normals[3] = texture(sampler2D(TEXTURES[NORMAL_MAP_TEXTURE_INDEX], NORMAL_MAP_SAMPLER), height_map_coordinate + vec2(1.0f, 1.0f) * MAP_RESOLUTION_RECIPROCAL).xyz;
    
        vec3 blend_1 = mix(normals[0], normals[1], fract(height_map_coordinate.y * MAP_RESOLUTION));
	    vec3 blend_2 = mix(normals[2], normals[3], fract(height_map_coordinate.y * MAP_RESOLUTION));

	    normal = mix(blend_1, blend_2, fract(height_map_coordinate.x * MAP_RESOLUTION));
        normal = normal * 2.0f - 1.0f;
        normal = normalize(normal);
    }

    //Calculate the heightmap texture coordinate.
    OutHeightMapTextureCoordinate = height_map_coordinate;

    //Calculate the displacement multiplier.
    float displacement_multiplier = 1.0f - min(length(OutWorldPosition - CAMERA_WORLD_POSITION) / 64.0f, 1.0f);

#if 0
    //Apply displacement.
    if (displacement_multiplier > 0.0f)
    {
        //Sample the displacements.
        float displacements[4];
        vec2 sample_offsets[4];
    
        sample_offsets[0] = vec2(0.0f, 0.0f) * MAP_RESOLUTION_RECIPROCAL;
        sample_offsets[1] = vec2(0.0f, 1.0f) * MAP_RESOLUTION_RECIPROCAL;
        sample_offsets[2] = vec2(1.0f, 0.0f) * MAP_RESOLUTION_RECIPROCAL;
        sample_offsets[3] = vec2(1.0f, 1.0f) * MAP_RESOLUTION_RECIPROCAL;

        for (uint i = 0; i < 4; ++i)
        {
            //Calculate the material texture coordinate.
            vec2 material_texture_coordinate = CalculateTerrainMaterialCoordinate(OutWorldPosition, normals[i], (floor(OutHeightMapTextureCoordinate * MAP_RESOLUTION) + sample_offsets[i] * MAP_RESOLUTION));

            //Cache the height map texture coordinate.
            vec2 height_map_texture_coordinate = OutHeightMapTextureCoordinate + sample_offsets[i];

            //Sample the index map.
            vec4 index_map = texture(sampler2D(TEXTURES[INDEX_MAP_TEXTURE_INDEX], INDEX_BLEND_MAP_SAMPLER), height_map_texture_coordinate);

            //Sample the blend map.
            vec4 blend_map = texture(sampler2D(TEXTURES[BLEND_MAP_TEXTURE_INDEX], INDEX_BLEND_MAP_SAMPLER), height_map_texture_coordinate);

            //Retrieve the materials.
            Material materials[4];
            materials[0] = MATERIALS[uint(index_map[0] * float(UINT8_MAXIMUM))];
            materials[1] = MATERIALS[uint(index_map[1] * float(UINT8_MAXIMUM))];
            materials[2] = MATERIALS[uint(index_map[2] * float(UINT8_MAXIMUM))];
            materials[3] = MATERIALS[uint(index_map[3] * float(UINT8_MAXIMUM))];

            //Evaluate the normal map/displacement of the materials.
            vec4 normal_map_displacements[4];
            EVALUATE_NORMAL_MAP_DISPLACEMENT(materials[0], material_texture_coordinate, MATERIAL_SAMPLER, normal_map_displacements[0]);
            EVALUATE_NORMAL_MAP_DISPLACEMENT(materials[1], material_texture_coordinate, MATERIAL_SAMPLER, normal_map_displacements[1]);
            EVALUATE_NORMAL_MAP_DISPLACEMENT(materials[2], material_texture_coordinate, MATERIAL_SAMPLER, normal_map_displacements[2]);
            EVALUATE_NORMAL_MAP_DISPLACEMENT(materials[3], material_texture_coordinate, MATERIAL_SAMPLER, normal_map_displacements[3]);

            //Find the highest index.
            uint highest_index = HighestIndex
            (
                normal_map_displacements[0].w * blend_map[0],
                normal_map_displacements[1].w * blend_map[1],
                normal_map_displacements[2].w * blend_map[2],
                normal_map_displacements[3].w * blend_map[3]
            );

            //Blend the material.
            displacements[i] =  normal_map_displacements[highest_index].w;
        }

        //Calculate the blends.
        vec4 blends;
        
        blends[0] = (1.0f - fract(OutHeightMapTextureCoordinate.x * MAP_RESOLUTION)) * (1.0f - fract(OutHeightMapTextureCoordinate.y * MAP_RESOLUTION));
        blends[1] = (1.0f - fract(OutHeightMapTextureCoordinate.x * MAP_RESOLUTION)) * (fract(OutHeightMapTextureCoordinate.y * MAP_RESOLUTION));
        blends[2] = (fract(OutHeightMapTextureCoordinate.x * MAP_RESOLUTION)) * (1.0f - fract(OutHeightMapTextureCoordinate.y * MAP_RESOLUTION));
        blends[3] = (fract(OutHeightMapTextureCoordinate.x * MAP_RESOLUTION)) * (fract(OutHeightMapTextureCoordinate.y * MAP_RESOLUTION));

        //Find the highest index.
        uint highest_index = HighestIndex
        (
            displacements[0] * blends[0],
            displacements[1] * blends[1],
            displacements[2] * blends[2],
            displacements[3] * blends[3]
        );

        //Calculate the final displacement!
	    float final_displacement = displacements[highest_index];

        //Apply the displacement!
        OutWorldPosition += normal * mix(-0.125f, 0.1875f, final_displacement) * displacement_multiplier; //Slight bias for upward displacement.
    }
#endif

    //Output the position.
    OutputVertexPosition(WORLD_TO_CLIP_MATRIX * vec4(OutWorldPosition, 1.0f));
}

//The fragment shader.
Fragment
{
    //Declare input parameters.
    InputParameter(vec3, InWorldPosition);
    InputParameter(vec2, InHeightMapTextureCoordinate);
    
#if 1
    //Calculate the base coordinate.
    vec2 base_coordinate = vec2
    (
        float(uint(InHeightMapTextureCoordinate.x * MAP_RESOLUTION)) + 0.5f,
        float(uint(InHeightMapTextureCoordinate.y * MAP_RESOLUTION)) + 0.5f
    ) * MAP_RESOLUTION_RECIPROCAL;

    //Set up the sample coordinates.
    vec2 sample_coordinates[4];
    
    sample_coordinates[0] = base_coordinate + vec2(0.0f, 0.0f) * MAP_RESOLUTION_RECIPROCAL;
    sample_coordinates[1] = base_coordinate + vec2(0.0f, 1.0f) * MAP_RESOLUTION_RECIPROCAL;
    sample_coordinates[2] = base_coordinate + vec2(1.0f, 0.0f) * MAP_RESOLUTION_RECIPROCAL;
    sample_coordinates[3] = base_coordinate + vec2(1.0f, 1.0f) * MAP_RESOLUTION_RECIPROCAL;

    //Sample the terrain materials!
    TerrainMaterial terrain_materials[4];

    for (uint sample_index = 0; sample_index < 4; ++sample_index)
    {
        //Sample the terrain normal.
        vec3 terrain_normal = texture(sampler2D(TEXTURES[NORMAL_MAP_TEXTURE_INDEX], NORMAL_MAP_SAMPLER), sample_coordinates[sample_index]).xyz * 2.0f - 1.0f;

        //Sample the index map.
        vec4 index_map = texture(sampler2D(TEXTURES[INDEX_MAP_TEXTURE_INDEX], INDEX_BLEND_MAP_SAMPLER), sample_coordinates[sample_index]);

        //Sample the blend map.
        vec4 blend_map = texture(sampler2D(TEXTURES[BLEND_MAP_TEXTURE_INDEX], INDEX_BLEND_MAP_SAMPLER), sample_coordinates[sample_index]);

        //Retrieve the materials.
        Material materials[4];
        materials[0] = MATERIALS[uint(index_map[0] * float(UINT8_MAXIMUM))];
        materials[1] = MATERIALS[uint(index_map[1] * float(UINT8_MAXIMUM))];
        materials[2] = MATERIALS[uint(index_map[2] * float(UINT8_MAXIMUM))];
        materials[3] = MATERIALS[uint(index_map[3] * float(UINT8_MAXIMUM))];

        //Calculate the material texture coordinate.
        vec2 material_texture_coordinate = CalculateTerrainMaterialCoordinate(InWorldPosition, terrain_normal, sample_coordinates[sample_index] * MAP_RESOLUTION * TERRAIN_MATERIAL_SCALE);

        //Sample the normal map/displacements.
        vec4 normal_map_displacements[4];

        EVALUATE_NORMAL_MAP_DISPLACEMENT(materials[0], material_texture_coordinate, MATERIAL_SAMPLER, normal_map_displacements[0]);
        EVALUATE_NORMAL_MAP_DISPLACEMENT(materials[1], material_texture_coordinate, MATERIAL_SAMPLER, normal_map_displacements[1]);
        EVALUATE_NORMAL_MAP_DISPLACEMENT(materials[2], material_texture_coordinate, MATERIAL_SAMPLER, normal_map_displacements[2]);
        EVALUATE_NORMAL_MAP_DISPLACEMENT(materials[3], material_texture_coordinate, MATERIAL_SAMPLER, normal_map_displacements[3]);

        //Calculate the weights.
        float weights[4];
        float weights_sum = 0.0f;

        for (uint weight_index = 0; weight_index < 4; ++weight_index)
        {
            weights[weight_index] = max(pow(blend_map[weight_index] * normal_map_displacements[weight_index].w, TERRAIN_DISPLACEMENT_POWER), TERRAIN_MINIMUM_DISPLACEMENT_WEIGHT);
            weights_sum += weights[weight_index];
        }

        //Calculate the weights sum reciprocal.
        float weights_sum_reciprocal = 1.0f / weights_sum;

        //Normalize all weights.
        for (uint weight_index = 0; weight_index < 4; ++weight_index)
        {
            weights[weight_index] *= weights_sum_reciprocal;
        }

        //Sample the albedo/thicknesses.
        vec4 albedo_thicknesses[4];

        EVALUATE_ALBEDO_THICKNESS(materials[0], material_texture_coordinate, MATERIAL_SAMPLER, albedo_thicknesses[0]);
        EVALUATE_ALBEDO_THICKNESS(materials[1], material_texture_coordinate, MATERIAL_SAMPLER, albedo_thicknesses[1]);
        EVALUATE_ALBEDO_THICKNESS(materials[2], material_texture_coordinate, MATERIAL_SAMPLER, albedo_thicknesses[2]);
        EVALUATE_ALBEDO_THICKNESS(materials[3], material_texture_coordinate, MATERIAL_SAMPLER, albedo_thicknesses[3]);

        //Sample the material properties.
        vec4 material_properties[4];

        EVALUATE_MATERIAL_PROPERTIES(materials[0], material_texture_coordinate, MATERIAL_SAMPLER, material_properties[0]);
        EVALUATE_MATERIAL_PROPERTIES(materials[1], material_texture_coordinate, MATERIAL_SAMPLER, material_properties[1]);
        EVALUATE_MATERIAL_PROPERTIES(materials[2], material_texture_coordinate, MATERIAL_SAMPLER, material_properties[2]);
        EVALUATE_MATERIAL_PROPERTIES(materials[3], material_texture_coordinate, MATERIAL_SAMPLER, material_properties[3]);

        //Write in the terrain material!
        terrain_materials[sample_index]._TerrainNormal = terrain_normal;
        terrain_materials[sample_index]._TerrainHeight = texture(sampler2D(TEXTURES[HEIGHT_MAP_TEXTURE_INDEX], HEIGHT_MAP_SAMPLER), sample_coordinates[sample_index]).x;
        terrain_materials[sample_index]._Albedo =   albedo_thicknesses[0].rgb * weights[0]
                                                    + albedo_thicknesses[1].rgb * weights[1]
                                                    + albedo_thicknesses[2].rgb * weights[2]
                                                    + albedo_thicknesses[3].rgb * weights[3];
        terrain_materials[sample_index]._Thickness =    albedo_thicknesses[0].w * weights[0]
                                                        + albedo_thicknesses[1].w * weights[1]
                                                        + albedo_thicknesses[2].w * weights[2]
                                                        + albedo_thicknesses[3].w * weights[3];
        terrain_materials[sample_index]._NormalMap =    normal_map_displacements[0].xyz * weights[0]
                                                        + normal_map_displacements[1].xyz * weights[1]
                                                        + normal_map_displacements[2].xyz * weights[2]
                                                        + normal_map_displacements[3].xyz * weights[3];
        terrain_materials[sample_index]._Displacement = normal_map_displacements[0].w * weights[0]
                                                        + normal_map_displacements[1].w * weights[1]
                                                        + normal_map_displacements[2].w * weights[2]
                                                        + normal_map_displacements[3].w * weights[3];
        terrain_materials[sample_index]._MaterialProperties =   material_properties[0] * weights[0]
                                                                + material_properties[1] * weights[1]
                                                                + material_properties[2] * weights[2]
                                                                + material_properties[3] * weights[3];
    }

    //Calculate the horizontal/vertical weight.
    float horizontal_weight = fract(InHeightMapTextureCoordinate.x * MAP_RESOLUTION);
    float vertical_weight = fract(InHeightMapTextureCoordinate.y * MAP_RESOLUTION);

    //Calculate the weights.
    float weights[4];
    float biased_weights[4];

    {
        weights[0] = biased_weights[0] = (1.0f - horizontal_weight) * (1.0f - vertical_weight);
        weights[1] = biased_weights[1] = (1.0f - horizontal_weight) * (vertical_weight);
        weights[2] = biased_weights[2] = (horizontal_weight) * (1.0f - vertical_weight);
        weights[3] = biased_weights[3] = (horizontal_weight) * (vertical_weight);

        float weights_sum = 0.0f;

        for (uint weight_index = 0; weight_index < 4; ++weight_index)
        {
            biased_weights[weight_index] = max(pow(biased_weights[weight_index] * terrain_materials[weight_index]._Displacement, TERRAIN_DISPLACEMENT_POWER), TERRAIN_MINIMUM_DISPLACEMENT_WEIGHT);
            weights_sum += biased_weights[weight_index];
        }

        //Calculate the weights sum reciprocal.
        float weights_sum_reciprocal = 1.0f / weights_sum;

        //Normalize all weights.
        for (uint weight_index = 0; weight_index < 4; ++weight_index)
        {
            biased_weights[weight_index] *= weights_sum_reciprocal;
        }
    }

    //Calculate the final terrain material.
    TerrainMaterial final_terrain_material = terrain_materials[0];

    final_terrain_material._TerrainNormal =         terrain_materials[0]._TerrainNormal * weights[0]
                                                    + terrain_materials[1]._TerrainNormal * weights[1]
                                                    + terrain_materials[2]._TerrainNormal * weights[2]
                                                    + terrain_materials[3]._TerrainNormal * weights[3];
    final_terrain_material._TerrainHeight =         terrain_materials[0]._TerrainHeight * weights[0]
                                                    + terrain_materials[1]._TerrainHeight * weights[1]
                                                    + terrain_materials[2]._TerrainHeight * weights[2]
                                                    + terrain_materials[3]._TerrainHeight * weights[3];
    final_terrain_material._Albedo =                terrain_materials[0]._Albedo * biased_weights[0]
                                                    + terrain_materials[1]._Albedo * biased_weights[1]
                                                    + terrain_materials[2]._Albedo * biased_weights[2]
                                                    + terrain_materials[3]._Albedo * biased_weights[3];
    final_terrain_material._Thickness =             terrain_materials[0]._Thickness * biased_weights[0]
                                                    + terrain_materials[1]._Thickness * biased_weights[1]
                                                    + terrain_materials[2]._Thickness * biased_weights[2]
                                                    + terrain_materials[3]._Thickness * biased_weights[3];
    final_terrain_material._NormalMap =             terrain_materials[0]._NormalMap * biased_weights[0]
                                                    + terrain_materials[1]._NormalMap * biased_weights[1]
                                                    + terrain_materials[2]._NormalMap * biased_weights[2]
                                                    + terrain_materials[3]._NormalMap * biased_weights[3];
    final_terrain_material._Displacement =          terrain_materials[0]._Displacement * biased_weights[0]
                                                    + terrain_materials[1]._Displacement * biased_weights[1]
                                                    + terrain_materials[2]._Displacement * biased_weights[2]
                                                    + terrain_materials[3]._Displacement * biased_weights[3];
    final_terrain_material._MaterialProperties =    terrain_materials[0]._MaterialProperties * biased_weights[0]
                                                    + terrain_materials[1]._MaterialProperties * biased_weights[1]
                                                    + terrain_materials[2]._MaterialProperties * biased_weights[2]
                                                    + terrain_materials[3]._MaterialProperties * biased_weights[3];

    //Calculate the shading normal.
    vec3 shading_normal;

    {
        //Calculate the tangent space matrix.
        mat3 tangent_space_matrix = CalculateGramSchmidtRotationMatrix(final_terrain_material._TerrainNormal, vec3(0.0f, 0.0f, 1.0f));

        //Calculate the shading normal!
        shading_normal = normalize(tangent_space_matrix * normalize(final_terrain_material._NormalMap * 2.0f - 1.0f));
    }

    //Calculate the velocity.
    vec2 velocity = CalculateCurrentScreenCoordinate(InWorldPosition) - CalculatePreviousScreenCoordinate(InWorldPosition) - CURRENT_FRAME_JITTER;

    //Output the fragments.
    OutputFragment(SceneFeatures1, vec4(final_terrain_material._Albedo, final_terrain_material._Thickness));
    OutputFragment(SceneFeatures2, vec4(shading_normal, gl_FragCoord.z));
    OutputFragment(SceneFeatures3, final_terrain_material._MaterialProperties);
    OutputFragment(SceneFeatures4, vec4(velocity, 0.0f, 0.0f));
#else
    //Calculate the blends.
    vec4 blends;
        
    float fractions[2];
    
    fractions[0] = fract(InHeightMapTextureCoordinate.x * MAP_RESOLUTION);
    fractions[1] = fract(InHeightMapTextureCoordinate.y * MAP_RESOLUTION);

    blends[0] = (1.0f - fractions[0]) * (1.0f - fractions[1]);
    blends[1] = (1.0f - fractions[0]) * (fractions[1]);
    blends[2] = (fractions[0]) * (1.0f - fractions[1]);
    blends[3] = (fractions[0]) * (fractions[1]);

    //Find the highest index.
    uint highest_index = HighestIndex
    (
        terrain_materials[0].normal_map_displacement.w * blends[0],
        terrain_materials[1].normal_map_displacement.w * blends[1],
        terrain_materials[2].normal_map_displacement.w * blends[2],
        terrain_materials[3].normal_map_displacement.w * blends[3]
    );

    //Calculate the final material!
    TerrainMaterial final_material;

    final_material.albedo = terrain_materials[highest_index].albedo;
    final_material.normal_map_displacement = terrain_materials[highest_index].normal_map_displacement;
    final_material.material_properties = terrain_materials[highest_index].material_properties;

    final_material.normal_map_displacement.xyz = final_material.normal_map_displacement.xyz * 2.0f - 1.0f;
	final_material.normal_map_displacement.xyz = normalize(final_material.normal_map_displacement.xyz);

    //Calculate the shading normal.
	vec3 shading_normal = normalize(tangent_space_matrix * final_material.normal_map_displacement.xyz);

    //Calculate the velocity.
    vec2 velocity = CalculateCurrentScreenCoordinate(InWorldPosition) - CalculatePreviousScreenCoordinate(InWorldPosition) - CURRENT_FRAME_JITTER;

    //Output the fragments.
    OutputFragment(SceneFeatures1, vec4(final_material.albedo, 1.0f));
    OutputFragment(SceneFeatures2, vec4(shading_normal, gl_FragCoord.z));
    OutputFragment(SceneFeatures3, final_material.material_properties);
    OutputFragment(SceneFeatures4, vec4(velocity, 0.0f, 0.0f));
#endif
}